<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
  <title>Reasonably Polymorphic</title>
  <link>https://reasonablypolymorphic.com</link>
  <atom:link href="https://reasonablypolymorphic.com/feed.rss" rel="self" type="application/rss+xml" />
  <description>Sandy Maguire's technical blog</description>
  <category>Programming</category>
  <copyright>2022 Sandy Maguire</copyright>
  <pubDate></pubDate>
  <language>en-us</language>
  <image>
      <url>https://reasonablypolymorphic.com/images/favicon.png</url>
    <title>Sandy Maguire</title>
    <link>https://reasonablypolymorphic.com</link>
  </image>
  <item>
      <title>FRP in Yampa: Part 1</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/yampa-frp/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/yampa-frp/index.html</guid>
      <pubDate>2023-12-21</pubDate>
      <content:encoded><![CDATA[
        <p>I‚Äôve been writing some Haskell lately, for the first time in a year, and it‚Äôs a total blast! In particular, school is out for the holidays, so I had some spare time, and thought I‚Äôd waste it by making a video game. In Haskell.</p>
<p>It‚Äôs always more fun to make video games with other people, but the few people I pitched it to all had the same response‚Äî‚ÄúI don‚Äôt know how to do that.‚Äù So it seemed like a good opportunity to dust off the old blog and write about how to make a video game in Haskell, using arrowized FRP.</p>
<p>What the hell does that mean? Get ready to FIND OUT!</p>
<h2 id="frp"><a href="#frp" class="header-link">FRP?<span class="header-link-emoji">üîó</span></a></h2>
<p>FRP is short for <em>functional reactive programming,</em> <a href="http://conal.net/papers/frp.html">originally invented by Conal Elliott</a>. The library we‚Äôll be using today is called <a href="https://hackage.haskell.org/package/Yampa">Yampa</a>, which is certainly inspired by Elliott‚Äôs work, but my guess is it‚Äôs insufficiently true to the core idea for him to be excited about it.</p>
<p>Nevertheless, even an imperfect implementation of the idea is still orders of magnitude for making real-time applications than doing everything by hand. And to this extent, Yampa is an excellent library.</p>
<p>So what exactly is FRP? The core idea is that we want to talk about functions that are continuous in time, which give rise to extremely useful combinators-over-time. Real-time programs written as FRP are much easier to reason about, and significantly more expressive than you‚Äôd manage otherwise.</p>
<h2 id="a-point-of-contrast"><a href="#a-point-of-contrast" class="header-link">A Point of Contrast<span class="header-link-emoji">üîó</span></a></h2>
<p>It‚Äôs informative to compare what writing a video game looks like under an imperative style. The idea is that you have your <em>game loop</em> (a fancy name for ‚Äúinfinite loop‚Äù) running:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  setup<span class="op">();</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span>true<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> delta_time <span class="op">=</span> waitForNextFrame<span class="op">();</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    updateGame<span class="op">(</span>delta_time<span class="op">);</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    renderFrame<span class="op">();</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>and this is kind of fine and manages to get the job done. But it‚Äôs inelegant for a few reasons. The biggest problem is that we are not actually modeling time here; we‚Äôre just running the game discretely, and time happens as a side effect of things changing. There‚Äôs this <code>delta_time</code> variable which counts how long it‚Äôs been since you last updated the game, which is to say it corresponds to ‚Äúhow much work you need to do <em>this</em> frame.‚Äù</p>
<p>What goes wrong is when <code>updateGame</code> or <code>renderFrame</code> takes too long to run; in that case, you might get spikes in how long it‚Äôs been since you last updated. Procedurally-written games compensate by interpolating everything a little further on the next frame, which gives the player the perception that they‚Äôre actually experiencing time.</p>
<p>But things can break down. If your last frame took too long, you need to simulate physics a little more this frame. In practice this usually means that you integrate your velocity a little more than usual‚Äîwhich really means your positions will teleport a little further than usual. This is a common bug in games, where it‚Äôs often easy to clip through obstacles when the frame-rate is too low.</p>
<iframe width="600" height="451" src="https://www.youtube.com/embed/7-E5QFtCbtI" title="Lag Through Vertical Walls" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
<p>The other problem with modeling your time only incidentally is that it makes it really annoying to actually do anything. For example, when you read from the controller you will only get whether the buttons are down or up, but you won‚Äôt get whether the button was <em>just pressed this frame.</em> If you want to know that you‚Äôll have to compute it yourself:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> last_a_button <span class="op">=</span> false<span class="op">;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> updateGame<span class="op">(</span><span class="dt">float</span> delta_time<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  controller ctrls <span class="op">=</span> getControllerState<span class="op">();</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>ctrls<span class="op">.</span>a_button <span class="op">&amp;&amp;</span> <span class="op">!</span>last_a_button<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// handle a press</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  last_a_button <span class="op">=</span> ctrls<span class="op">.</span>a_button<span class="op">;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It‚Äôs tedious, but it gets the job done. Another common pain point is when you want to do something five seconds in the future:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> timer<span class="op">;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> updateGame<span class="op">(</span><span class="dt">float</span> delta_time<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  timer <span class="op">-=</span> delta_time<span class="op">;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>getWantsToStartTimer<span class="op">())</span> <span class="op">{</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    timer <span class="op">=</span> <span class="fl">5.0</span><span class="op">;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>timer <span class="op">&lt;=</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// handle timer finishing</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Again, nothing you can‚Äôt tackle, but in aggregate, this all becomes very weighty. Not being able to model time explicitly is a real pain, and everywhere you go you need to simulate it by diddling state changes.</p>
<h2 id="signal-functions"><a href="#signal-functions" class="header-link">Signal Functions<span class="header-link-emoji">üîó</span></a></h2>
<p>If you‚Äôve ever written a video game, it probably looked a lot like the examples from the previous section. That‚Äôs the sort of thing we‚Äôd like to abstract over, and work at a much higher level of detail than.</p>
<p>Here comes FRP to the rescue.</p>
<p>The core building block in Yampa is the ‚Äúsignal function‚Äù, written as <code>SF i o</code>. You can think of this as a transformer of signals of <code>i</code> into signals of <code>o</code>, where a signal is a function <code>Time -&gt; a</code>. Unwrapping all of this, an <code>SF i o</code> is a function <code>(Time -&gt; i) -&gt; (Time -&gt; o)</code>.</p>
<p>That‚Äôs everything you need to know about what <code>SF</code>s <em>are</em>. I don‚Äôt know how they‚Äôre implemented, and I don‚Äôt need to, because the abstraction doesn‚Äôt leak. Being a haskell programmer, you‚Äôre probably looking at <code>SF i o</code> and thinking ‚Äúthat thing is clearly a <code>Functor</code>/<code>Applicative</code>/<code>Monad</code>.‚Äù Two out of three‚Äîit‚Äôs a functor and an applicative, but <em>not</em> a monad. We‚Äôll come back to this momentarily.</p>
<p>The trick to working in FRP is to think of continuous streams of values over time. Thus, we can think about the player‚Äôs controller as an <code>SF</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">controller ::</span> <span class="dt">SF</span> () <span class="dt">Controller</span></span></code></pre></div>
<p>which is to say, a continuous stream of <code>Controller</code> values. By marking the input side of the <code>SF</code> as a unit, it means we don‚Äôt need to provide anything in order to get this value, which makes sense since the controller state is obviously at the very periphery of our program.</p>
<p>Since <code>SF</code> is a functor, we can get the state of the A button by fmapping it:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">aState ::</span> <span class="dt">SF</span> () <span class="dt">Bool</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>aState <span class="ot">=</span> <span class="fu">fmap</span> a_button controller</span></code></pre></div>
<p>which isn‚Äôt very surprising. But what‚Äôs more interesting are the SF-operating primitives that Yampa gives us. For example, there‚Äôs <code>delay</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">delay ::</span> <span class="dt">Time</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">SF</span> a a</span></code></pre></div>
<p>which delays a signal by the given time, using the <code>a</code> parameter as the value for the initial value of the stream. Thus, we can get the value of the A button two seconds ago via:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">aStateTwoSecondsAgo ::</span> <span class="dt">SF</span> () <span class="dt">Bool</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>aStateTwoSecondsAgo <span class="ot">=</span> aState <span class="op">&gt;&gt;&gt;</span> delay <span class="dv">2</span> <span class="dt">False</span></span></code></pre></div>
<p>where <code>(&gt;&gt;&gt;) :: SF a b -&gt; SF b c -&gt; SF a c</code> is composition of <code>SF</code>s, analogous to function composition.</p>
<p>Already we can see the benefit of this approach. While it‚Äôs not clear exactly <em>why</em> we might want to look at the state of the controller two seconds ago, it‚Äôs also non-obvious how you‚Äôd go about implementing such a thing procedurally with a game loop.</p>
<p>One last signal function we might be interested for the time being is <code>integral</code>, which allows us to compute the integral of a stream:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">integral ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">SF</span> a a</span></code></pre></div>
<h2 id="events"><a href="#events" class="header-link">Events<span class="header-link-emoji">üîó</span></a></h2>
<p><code>SF</code>s are transformers of continuous signals, but often we want to talk about discrete moments in time. For this, we‚Äôve got the <code>Event</code> type, which is isomorphic to <code>Maybe</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Event</span> a</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">Event</span> a</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">NoEvent</span></span></code></pre></div>
<p>The interpretation you should have for an <code>Event</code> is that it‚Äôs a discrete piece of data arriving at a specific moment in time. In our earlier discussion of things you want to do in games, we‚Äôve already seen two examples of events: when a timer expires, and when the player <em>presses</em> the A button. Under Yampa, the first is particularly easy to code up, by way of the <code>after</code> combinator:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">after ::</span> <span class="dt">Time</span> <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">SF</span> a (<span class="dt">Event</span> b)</span></code></pre></div>
<p>If we want to trigger a timer after 5 seconds, it‚Äôs just <code>after 5 () :: SF a (Event ())</code>, and we can listen to the output of this stream for an <code>Event ()</code> value in order to know when the timer has elapsed.</p>
<p>Similarly, when we‚Äôre interested in the player pressing a button, what we‚Äôre really interested is in the <em>edges</em> of their button signal. We can get this functionality by way of the <code>edge</code> signal function:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">edge ::</span> <span class="dt">SF</span> <span class="dt">Bool</span> (<span class="dt">Event</span> ())</span></code></pre></div>
<p>which generates an event whenever the input boolean goes from false to true.</p>
<p>Of course, just being able to generate events isn‚Äôt very useful if we don‚Äôt have any means of subsequently eliminating them. A simple means of eliminating events is via <code>hold</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">hold ::</span> a <span class="ot">-&gt;</span> <span class="dt">SF</span> (<span class="dt">Event</span> a) a</span></code></pre></div>
<p>The <code>hold</code> function takes a stream of events, and holds onto the most recent value it received.</p>
<h2 id="making-a-game-of-snake"><a href="#making-a-game-of-snake" class="header-link">Making a Game of Snake<span class="header-link-emoji">üîó</span></a></h2>
<p>We‚Äôve already seen enough of FRP in order to make most of the old classic, Snake. In Snake, you are a snake who slithers around in a square, with a constant velocity, continuing in the direction you‚Äôre going until the player asks you to turn.</p>
<p>Begin with a <code>Controller</code>, and an <code>SF</code> to read it:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Controller</span> <span class="ot">=</span> <span class="dt">Controller</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> ctrl_up    ::</span> <span class="dt">Bool</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> ctrl_down  ::</span> <span class="dt">Bool</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> ctrl_left  ::</span> <span class="dt">Bool</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> ctrl_right ::</span> <span class="dt">Bool</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ot">controller ::</span> <span class="dt">SF</span> () <span class="dt">Controller</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>controller <span class="ot">=</span> <span class="op">...</span></span></code></pre></div>
<p>We can then write a little helper function to determine when a button has been pressed‚Äîtagging it with a particular value of our choice:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">onPress ::</span> (<span class="dt">Controller</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">SF</span> () (<span class="dt">Event</span> a)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>onPress field a <span class="ot">=</span> <span class="fu">fmap</span> (<span class="fu">fmap</span> (<span class="fu">const</span> a)) <span class="op">$</span> <span class="fu">fmap</span> field controller <span class="op">&gt;&gt;&gt;</span> edge</span></code></pre></div>
<p>Next, we can sum up an <code>onPress</code> for each direction on the controller, mapping them into direction vectors:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">arrowEvents ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">SF</span> () (<span class="dt">Event</span> (<span class="dt">V2</span> a))</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>arrowEvents <span class="ot">=</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  (\u d l r <span class="ot">-&gt;</span> asum [u, d, l r])</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;$&gt;</span> onPress ctrl_up    (<span class="dt">V2</span> <span class="dv">0</span> (<span class="op">-</span><span class="dv">1</span>))</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> onPress ctrl_down  (<span class="dt">V2</span> <span class="dv">0</span> <span class="dv">1</span>)</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> onPress ctrl_left  (<span class="dt">V2</span> (<span class="op">-</span><span class="dv">1</span>) <span class="dv">0</span>)</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> onPress ctrl_right (<span class="dt">V2</span> <span class="dv">1</span>    <span class="dv">0</span>)</span></code></pre></div>
<p>Above, the use of <code>asum</code> allows us to combine these four events into one, meaning that if the player presses two directions at exactly the same moment, we will prefer <code>up</code> over <code>down</code>, and <code>down</code> over <code>left</code>, etc.</p>
<p>By <code>hold</code>ing onto the most recent arrow event, we can get the current direction our snake is facing:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">snakeDirection ::</span> <span class="dt">SF</span> () (<span class="dt">V2</span> <span class="dt">Float</span>)</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>snakeDirection <span class="ot">=</span> arrowButtons <span class="op">&gt;&gt;&gt;</span> hold (<span class="dt">V2</span> <span class="dv">0</span> <span class="dv">1</span>)</span></code></pre></div>
<p>which we can then integrate in order to have the snake move around:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">snakePosition ::</span> <span class="dt">SF</span> () (<span class="dt">V2</span> <span class="dt">Float</span>)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>snakePosition <span class="ot">=</span> snakeDirection <span class="op">&gt;&gt;&gt;</span> integral</span></code></pre></div>
<p>Not too shabby at all! This particular snake will move at a rate of 1 unit per second, but we could make him faster by scaling up <code>snakeDirection</code> before taking its <code>integral</code>.</p>
<h2 id="wrapping-up"><a href="#wrapping-up" class="header-link">Wrapping Up<span class="header-link-emoji">üîó</span></a></h2>
<p>Hopefully I‚Äôve given you a taste of how FRP can radically simplify the implementation of real-time applications. Tomorrow we‚Äôll look into arrowized FRP, and get a sense of how to build bigger, more interesting programs.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction: Done!</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/certainty-by-construction/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/certainty-by-construction/index.html</guid>
      <pubDate>2023-10-30</pubDate>
      <content:encoded><![CDATA[
        <p>Happy days and happy news: it‚Äôs done.</p>
<center>
<a href="https://leanpub.com/certainty-by-construction"><img src="/images/cbc.png" alt="Certainty by Construction"></a>
</center>
<p>After a year of work, I‚Äôm <em>thrilled</em> to announce the completion my new book, <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>.</p>
<p>Certainty by Construction is a book on doing mathematics and software design in the proof assistant Agda, which is the language Haskell wants to be when it grows up. The book is part Agda primer, introduction to abstract algebra, and algorithm design manual, with a healthy dose of philosophy mixed in to help build intuition.</p>
<p>If you‚Äôre the sort of person who would like to learn more math (including all the proof burden), and see how to apply it to writing real software, I think you‚Äôd groove on this book. If it sounds up your alley, I‚Äôd highly encourage you to <a href="https://leanpub.com/certainty-by-construction">give it a read</a>.</p>
<p>I‚Äôm not much on social media these days, but if you are, I‚Äôd really appreciate a signal boost on this announcement! Thanks to everyone for their support and understanding over the last year. I love you all!</p>
<p><a href="https://leanpub.com/certainty-by-construction">Go cop Certainty by Construction!</a></p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 10</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report10/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report10/index.html</guid>
      <pubDate>2023-10-12</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I‚Äôm writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you‚Äôre excited about, please do let me know!</p>
<hr />
<p>Thanks for all of your kind words of support after my last report. That‚Äôs the sort of thing that really helps keep me motivated. So thank you!</p>
<p>BUT GOOD NEWS. HERE‚ÄôS SOMETHING ELSE THAT ALSO HELPS TO KEEP ME MOTIVATED.</p>
<p>I just wrapped up the last proof in the book!!!!</p>
<p>It‚Äôs taken me all week to put together these glorious 50 lines of Agda, but it makes for a damn fine finale for the book. So the game plan is now to delete that last chapter I‚Äôve got hanging around that‚Äôs kinda about matrices, rewrite the prose on isomorphisms, and then do one final polish pass where I add things like indices and definitions.</p>
<p>Grad school has been much busier than I was expecting it to be, but no matter! I will persevere. Being so close to the finish line is tantalizing and I expect I‚Äôll just spend the next few days powering through it all. This thing is definitely going to be finished by the end of the year.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 9</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report9/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report9/index.html</guid>
      <pubDate>2023-09-02</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I‚Äôm writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you‚Äôre excited about, please do let me know!</p>
<hr />
<p>It is now the wee hours of Sept 2, and it‚Äôs safe to say I did not make the deadline. The book is not yet finished come hell or high water. Damn. Here‚Äôs the state of the world:</p>
<ul>
<li>Everything up to page 203/296 has been aggressively edited, in terms of prose, code, general presentation, and overall topic order. There are still a few TODOs to write chapter summaries, but those aren‚Äôt the end of the world if they don‚Äôt happen.</li>
<li>It‚Äôs now possible to build semi-readable epubs. Needing to run everything through the Agda compiler makes build pipelines surprisingly hard, but I think this should only require a couple of hours to get it into a good place.</li>
<li>I have commissioned a contest of potential covers for the book; no results yet, but I expect to to have some things to look at by the end of this week.</li>
<li>Since my last update, I realized I had accidentally lost the chapter on ring solving when doing my big refactor. I‚Äôve since found it, but it‚Äôs no longer particularly motivated and is rather out of place, so I think it‚Äôs going to get cut. Kill your darlings and all that.</li>
</ul>
<p>All in all, I‚Äôm bummed I didn‚Äôt make the deadline, but the quality of the book is exponentially better, so I think it‚Äôs a worthwhile trade. I‚Äôve got three/four chapters left to edit (depending on if ring solving gets cut), and I need to write a closing chapter to make the end less jarring.</p>
<p>On a personal note, although the book is much longer in content than my other books, it‚Äôs packed much tighter and thus is going to be <em>physically</em> smaller when I get it printed. For some reason that is holding a lot of space in my head right now, and steering me away from cutting too much. I suppose I shouldn‚Äôt fret too much; there‚Äôs still an index and glossary I need to add which will probably add a bit of length. Also I know this doesn‚Äôt matter, but I care about it nevertheless.</p>
<p>So why didn‚Äôt I get this done on time? The reason seems to be just that it was too ambitious a goal. I definitely underestimated the amount of polish required here. This month I put 65 hours of honest-to-goodness <em>work</em> into the book, which if you measure in terms of the 2.9h average hours of work that an officer worker does in a day is more than a full time job. It‚Äôs very late and I don‚Äôt know if that makes sense but I think it might.</p>
<p>Anyway, here‚Äôs the plan going forwards‚ÄîI‚Äôve got some of this week to work on the book before getting married and starting grad school. The goal is to just keep on at this pace for as long as I possibly can until I die or real life gets in the way. It sucks and I‚Äôm exhausted and would like to be finished with this thing, but it‚Äôs not done with <em>me</em> yet. And so we go on.</p>
<p>But maybe I‚Äôll take tomorrow off because I need to sort out getting married, and I don‚Äôt think this kind of extreme focus is good for my mental health. It‚Äôs a bit of a balancing act though, because life is only going to get more busy after next week.</p>
<p>Sorry for the bleak trail off here. I should go to bed.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 8</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report8/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report8/index.html</guid>
      <pubDate>2023-08-23</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I‚Äôm writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you‚Äôre excited about, please do let me know!</p>
<hr />
<p>Eight days away from my deadline. How‚Äôs it going? Hectic.</p>
<p>I‚Äôve been in a flurry of editing for the last two weeks. As of right now, I‚Äôm currently editing page 138/252. At this rate, it‚Äôs not looking promising, but I did just buy a flat of Red Bull, so you never know.</p>
<p>Besides editing, what‚Äôs new? Lots of minor typesetting stuff, like which paragraphs should be indented. I also did a pass through all the Agda modules with their new, final names, in easy searchable format. Along with that, the end of each chapter now has an explicit export list, which subsequent chapters import (rather than getting it from the stdlib.) This means you can see at a glance whether a chapter has prerequisites you need to read first! Minor stuff, but Nintendo polish nevertheless.</p>
<p>I had to rewrite a good chunk of chapter 2, and a lot of the prose in chapter 3 is from a very early edition of the book, and doesn‚Äôt have the shine as the rest of it. So that‚Äôs getting reworked too. My hope is that the later chapters were written more recently, and therefore will require less elbow grease. It‚Äôs plausible, and would be greatly appreciated. But I fear that the setoids chapter needs a lot of work, and I‚Äôm just trying my best to ignore it. For now.</p>
<p>In other news, I‚Äôm now uploading nightly builds to <a href="https://leanpub.com/certainty-by-construction">Leanpub</a> in order to keep myself honest. There‚Äôs no indication of which half of the book has been edited and which hasn‚Äôt, but that seems like a good idea I should adopt for the next build. That way particularly dedicated readers could follow along and see just how quickly I can get material cleaned up. And it will prevent me from accidentally forgetting where I was and re-editing it all again. Which has happened several times, somehow.</p>
<p>Okay that‚Äôs enough of an update. Back to the grind. Love y‚Äôall.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 7</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report7/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report7/index.html</guid>
      <pubDate>2023-08-12</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I‚Äôm writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you‚Äôre excited about, please do let me know!</p>
<hr />
<p>Where has this dingus Sandy been?? Busy busy busy! I‚Äôm in the middle of planning a wedding (my own), as well as just finished being the best man at my friend‚Äôs wedding. Plus getting the tax man‚Äôs records all sorted out for him, and a bunch of other things that fell into the ‚Äúurgent‚Äù AND ‚Äúimportant‚Äù categories.</p>
<p>Yeesh. Enough excuses though. I‚Äôm back and haven‚Äôt given up on any of this!</p>
<p>These days I‚Äôm calling the book ‚Äúessentially done,‚Äù and all that is required is extensive editing. Which I‚Äôve been doing. Every day on the bus I‚Äôm reading my PDF copy and making notes in the margin. Then I get home and go through the notes and clean up the prose.</p>
<p>It‚Äôs slow going, but that‚Äôs the way of the world. The prose is getting dramatically tightened up, however. It‚Äôs kind of fun to go through, be aware of the point I‚Äôm trying to make, and realize that I haven‚Äôt actually made it. I‚Äôm not calling this ‚Äúrewriting,‚Äù but most paragraphs are changing dramatically.</p>
<p>Today I also sat down and hashed out a bunch of the technical pipeline issues I‚Äôve been putting off for a year. Like getting section references working. So now instead of saying ‚Äúas in <strong>sec:propeq?</strong>‚Äù, the prose now says ‚Äúas in section 3.2‚Äù. The annotations have always been there, but getting the build to actually put in the text has taken away several hours of my life.</p>
<p>More excitingly, I also managed to get inline code snippets properly highlighted‚Äîand, even better, <em>broken code</em> now also highlights. This is a resounding achievement, because the whole idea of literate Agda is that it must compile. And the compiler is what generates the syntax highlighting. It‚Äôs a terrifying marvel of engineering, but it does work.</p>
<p>So that‚Äôs all. I‚Äôm just going to push on this book thing until it‚Äôs done. Or until September 1. Whichever comes sooner. That‚Äôs a terrifying thought, so I guess I‚Äôd better get back to it.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 6</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report6/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report6/index.html</guid>
      <pubDate>2023-07-14</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I‚Äôm writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you‚Äôre excited about, please do let me know!</p>
<hr />
<p>Aaaand we‚Äôre back. Traveling was nice, but it‚Äôs nicer to be home and being productive and making things.</p>
<p>This week I did a lot of work on the isomorphisms chapter. First and foremost, I proved that everything I knew about cardinalities from the Curry-Howard isomorphism held true. That is, that sum types add the cardinalities of their constituent types, product types multiply them, and by far the hardest to prove, that functions act as exponentials.</p>
<p>Going through the work of that taught me that I haven‚Äôt really internalized everything I ought to have regarding setoids, since I originally framed the problem wrong and needed Reed to help sort me out. There is some material in this chapter about building the relevant setoids for all of the necessary types, which sucks and would be better to avoid. I‚Äôm unsure if it will get moved out to the setoid chapter, or if I‚Äôll just give a sketch in the final version, or maybe if it just gets left where it is.</p>
<p>For me, the motivating use case behind the algebra of types is to find different representations of things, ones with better computational properties. This turns out to be extremely easy to exploit in Haskell, but upon trying to write about it, I realized how much magic the Haskell runtime is doing in order to make that happen. It‚Äôs amazing that I‚Äôm still managing to trick myself into thinking I understand things, even after working on this book for nearly a year. But I suppose that‚Äôs the whole purpose!</p>
<p>So anyway, that section isn‚Äôt yet finished, but I think one more week will be enough to tie it together. And at that point, I‚Äôve written everything I intend to, and will spend the remainder of my project time on editing, rewriting, cleaning up, and tackling the weird typesetting problems that remain. The end is nigh!</p>
<hr />
<p>That‚Äôs all for today. If you‚Äôve already bought the book, you can get the updates for free on <a href="https://leanpub.com/certainty-by-construction">Leanpub</a>. If you haven‚Äôt, might I suggest doing so? Your early support and feedback helps inspire me and ensure the book is as good as it can possibly be.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 5</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report5/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report5/index.html</guid>
      <pubDate>2023-06-20</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I‚Äôm writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you‚Äôre excited about, please do let me know!</p>
<hr />
<p>Reporting in a little early this week, since I‚Äôm going to be traveling for two weeks without my laptop starting tomorrow. That means the book isn‚Äôt going to get much work done on it until early July.</p>
<p>Nevertheless, I‚Äôve been busy this week. I looked at a ‚Äúreal‚Äù book the other day, and was floored by how beautifully it was typeset. It inspired me to up my game and put a lot more energy into presentation. The results, in my opinion, are stunning. I redid the chapter headings. I changed the page headers. Painfully, I changed the margins too, which left the book 100 pages shorter than it used to be. Ouch! But what I‚Äôm most proud of is the new color scheme.</p>
<p>Let‚Äôs face it. The out-of-the-box color scheme for Agda is hard to love. It‚Äôs got ten seemingly-randomly-chosen colors, all smashed together. At first I tried a black and white color scheme, which looked great, but made the code hard to parse. So instead, I‚Äôve settled on a trichomatic scheme based on the colors from <a href="https://c82.net/euclid/#books">Byrne‚Äôs Euclid</a>. It took a lot of tweaking to make everything work, but I‚Äôm really happy with how it‚Äôs turned out.</p>
<p>But presentation isn‚Äôt everything I did this week. No, I also rewrote everything I had on setoids, and have now motivated them by way of a section on monoids and their homomorphisms. This material is also a rewrite of the old janky monoid stuff, and it‚Äôs really come together. I‚Äôve been trying to tie in a little more ‚Äúand, as a programmer, why you should care‚Äù about some of these ideas.</p>
<p>Furthermore, there‚Äôs some rudimentary new material on finite numbers, characteristic functions and isomorphisms, with the eventual programming tie-in being automatic memoization of functions. This is a topic I thought I understood, but working through the formalization makes me realize I had fooled myself.</p>
<p>Anyway. I‚Äôm going to be gone for a few weeks, but I‚Äôll pick right back up when I hit ground again. See you soon.</p>
<hr />
<p>That‚Äôs all for today. If you‚Äôve already bought the book, you can get the updates for free on <a href="https://leanpub.com/certainty-by-construction">Leanpub</a>. If you haven‚Äôt, might I suggest doing so? Your early support and feedback helps inspire me and ensure the book is as good as it can possibly be.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 4</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report4/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report4/index.html</guid>
      <pubDate>2023-06-16</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I‚Äôm writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you‚Äôre excited about, please do let me know!</p>
<hr />
<p>I landed a two-week long gig three weeks ago, and that ate up my time for a little bit. But I‚Äôm back in action, significantly richer, and much more inspired to be working on Certainty by Construction again.</p>
<p>The end is finally in sight. This week I tore apart the modular arithmetic stuff from the material on setoids, realizing that the two were unrelated. I‚Äôd been having a lot of trouble getting that chapter sorted out, and it‚Äôs because it shouldn‚Äôt have been a chapter after all.</p>
<p>Instead, I‚Äôve been working on merging the stuff about monoids and monoid homomorphisms into the setoid chapter, which is a much better motivation for setoids when you realize you can‚Äôt write many of the monoids you‚Äôd like to be able to. If I can fit lattices into there as well, I‚Äôll be a very happy man.</p>
<p>Also this week I worked on some typesetting things. In particular, you‚Äôll notice a gutter indicator on every code block telling you exactly where the code block should be indented relative to the file. This is a big improvement from before when you just had to guess, but I‚Äôm not yet <em>happy</em> with it. Please give it a read and let me know if you like the change, or what might be better.</p>
<p>Additionally I spent a <em>lot</em> of time making sure every code block had good vertical alignment of its code elements. That means all the equals signs should line up, and that the same argument is always in the same column, no matter how many patterns you‚Äôve already matched. It‚Äôs not the sort of thing you‚Äôd notice, but it‚Äôs certainly the sort of thing whose <em>absence</em> you‚Äôd notice.</p>
<p>I‚Äôm committing to a hard deadline for this book of <em>September 1, 2023.</em> The thing is going to be finished and off to the printers by that day, because I want to have it done before I‚Äôm married, and that is coming up soon. And also, I work much better with a deadline.</p>
<hr />
<p>Anyway, that‚Äôs all for today. If you‚Äôve already bought the book, you can get the updates for free on <a href="https://leanpub.com/certainty-by-construction">Leanpub</a>. If you haven‚Äôt, might I suggest doing so? Your early support and feedback helps inspire me and ensure the book is as good as it can possibly be.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 3</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report3/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report3/index.html</guid>
      <pubDate>2023-05-25</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I‚Äôm writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you‚Äôre excited about, please do let me know!</p>
<hr />
<p>Week three, and this update is coming in hot, a whole day early! This week I worked on the ring solving chapter, realizing that I can make a very much non-toy solver, and pack it into a chapter. We now build a multivariate semiring solver, discuss how and why it works, and then do some dependent-type shenanigans to put a delightful user interface in front of the whole thing.</p>
<p>In addition, it came with some excellent opportunities to discuss where semantics come from, and let me talk about homomorphisms earlier than I was otherwise hoping to.</p>
<p>My plan for the week was to tackle the remainder of the setoids chapter, but setoids are awful and it‚Äôs hard to motivate myself to do that, since I avoid using them in my day-to-day life whenever I can. Which is always. We‚Äôll see what happens with this chapter, but maybe it‚Äôll get melted down into something else. Nevertheless, understanding setoids <em>is</em> important for actually doing anything with the stdlib, so I dunno.</p>
<p>On the typesetting front, I spent an hour today fighting with Latex trying to ensure that it has glyphs for every unicode character in the book. I‚Äôve got all but one of them sorted out now, and in the process, learned way more about Latex than any human should need to know.</p>
<p>The plan for next week is to cleanup the extremely WIP backmatter chapters. There‚Äôs a bunch of crap in there about me trying to do math math and failing, because math math doesn‚Äôt give two sniffs about constructability, and so none of it works out. If I‚Äôm feeling particularly plucky, I might try my hand at defining the reals, just because it might be fun.</p>
<p>As of today‚Äôs update, the book is now 360 pages long! I estimate it‚Äôll be about 450 when it‚Äôs done, so we‚Äôre clearly making progress.</p>
<hr />
<p>Anyway, that‚Äôs all for today. If you‚Äôve already bought the book, you can get the updates for free on <a href="https://leanpub.com/certainty-by-construction">Leanpub</a>. If you haven‚Äôt, might I suggest doing so? Your early support and feedback helps inspire me and ensure the book is as good as it can possibly be.</p>
      ]]></content:encoded>
  </item>
</channel>
</rss>
