<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
  <title>Reasonably Polymorphic</title>
  <link>https://reasonablypolymorphic.com</link>
  <atom:link href="https://reasonablypolymorphic.com/feed.rss" rel="self" type="application/rss+xml" />
  <description>Sandy Maguire's technical blog</description>
  <category>Programming</category>
  <copyright>2022 Sandy Maguire</copyright>
  <pubDate></pubDate>
  <language>en-us</language>
  <image>
      <url>https://reasonablypolymorphic.com/images/favicon.png</url>
    <title>Sandy Maguire</title>
    <link>https://reasonablypolymorphic.com</link>
  </image>
  <item>
      <title>Certainty by Construction Progress Report 5</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report5/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report5/index.html</guid>
      <pubDate>2023-06-20</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I’m writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you’re excited about, please do let me know!</p>
<hr />
<p>Reporting in a little early this week, since I’m going to be traveling for two weeks without my laptop starting tomorrow. That means the book isn’t going to get much work done on it until early July.</p>
<p>Nevertheless, I’ve been busy this week. I looked at a “real” book the other day, and was floored by how beautifully it was typeset. It inspired me to up my game and put a lot more energy into presentation. The results, in my opinion, are stunning. I redid the chapter headings. I changed the page headers. Painfully, I changed the margins too, which left the book 100 pages shorter than it used to be. Ouch! But what I’m most proud of is the new color scheme.</p>
<p>Let’s face it. The out-of-the-box color scheme for Agda is hard to love. It’s got ten seemingly-randomly-chosen colors, all smashed together. At first I tried a black and white color scheme, which looked great, but made the code hard to parse. So instead, I’ve settled on a trichomatic scheme based on the colors from <a href="https://c82.net/euclid/#books">Byrne’s Euclid</a>. It took a lot of tweaking to make everything work, but I’m really happy with how it’s turned out.</p>
<p>But presentation isn’t everything I did this week. No, I also rewrote everything I had on setoids, and have now motivated them by way of a section on monoids and their homomorphisms. This material is also a rewrite of the old janky monoid stuff, and it’s really come together. I’ve been trying to tie in a little more “and, as a programmer, why you should care” about some of these ideas.</p>
<p>Furthermore, there’s some rudimentary new material on finite numbers, characteristic functions and isomorphisms, with the eventual programming tie-in being automatic memoization of functions. This is a topic I thought I understood, but working through the formalization makes me realize I had fooled myself.</p>
<p>Anyway. I’m going to be gone for a few weeks, but I’ll pick right back up when I hit ground again. See you soon.</p>
<hr />
<p>That’s all for today. If you’ve already bought the book, you can get the updates for free on <a href="https://leanpub.com/certainty-by-construction">Leanpub</a>. If you haven’t, might I suggest doing so? Your early support and feedback helps inspire me and ensure the book is as good as it can possibly be.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 4</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report4/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report4/index.html</guid>
      <pubDate>2023-06-16</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I’m writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you’re excited about, please do let me know!</p>
<hr />
<p>I landed a two-week long gig three weeks ago, and that ate up my time for a little bit. But I’m back in action, significantly richer, and much more inspired to be working on Certainty by Construction again.</p>
<p>The end is finally in sight. This week I tore apart the modular arithmetic stuff from the material on setoids, realizing that the two were unrelated. I’d been having a lot of trouble getting that chapter sorted out, and it’s because it shouldn’t have been a chapter after all.</p>
<p>Instead, I’ve been working on merging the stuff about monoids and monoid homomorphisms into the setoid chapter, which is a much better motivation for setoids when you realize you can’t write many of the monoids you’d like to be able to. If I can fit lattices into there as well, I’ll be a very happy man.</p>
<p>Also this week I worked on some typesetting things. In particular, you’ll notice a gutter indicator on every code block telling you exactly where the code block should be indented relative to the file. This is a big improvement from before when you just had to guess, but I’m not yet <em>happy</em> with it. Please give it a read and let me know if you like the change, or what might be better.</p>
<p>Additionally I spent a <em>lot</em> of time making sure every code block had good vertical alignment of its code elements. That means all the equals signs should line up, and that the same argument is always in the same column, no matter how many patterns you’ve already matched. It’s not the sort of thing you’d notice, but it’s certainly the sort of thing whose <em>absence</em> you’d notice.</p>
<p>I’m committing to a hard deadline for this book of <em>September 1, 2023.</em> The thing is going to be finished and off to the printers by that day, because I want to have it done before I’m married, and that is coming up soon. And also, I work much better with a deadline.</p>
<hr />
<p>Anyway, that’s all for today. If you’ve already bought the book, you can get the updates for free on <a href="https://leanpub.com/certainty-by-construction">Leanpub</a>. If you haven’t, might I suggest doing so? Your early support and feedback helps inspire me and ensure the book is as good as it can possibly be.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 3</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report3/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report3/index.html</guid>
      <pubDate>2023-05-25</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I’m writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you’re excited about, please do let me know!</p>
<hr />
<p>Week three, and this update is coming in hot, a whole day early! This week I worked on the ring solving chapter, realizing that I can make a very much non-toy solver, and pack it into a chapter. We now build a multivariate semiring solver, discuss how and why it works, and then do some dependent-type shenanigans to put a delightful user interface in front of the whole thing.</p>
<p>In addition, it came with some excellent opportunities to discuss where semantics come from, and let me talk about homomorphisms earlier than I was otherwise hoping to.</p>
<p>My plan for the week was to tackle the remainder of the setoids chapter, but setoids are awful and it’s hard to motivate myself to do that, since I avoid using them in my day-to-day life whenever I can. Which is always. We’ll see what happens with this chapter, but maybe it’ll get melted down into something else. Nevertheless, understanding setoids <em>is</em> important for actually doing anything with the stdlib, so I dunno.</p>
<p>On the typesetting front, I spent an hour today fighting with Latex trying to ensure that it has glyphs for every unicode character in the book. I’ve got all but one of them sorted out now, and in the process, learned way more about Latex than any human should need to know.</p>
<p>The plan for next week is to cleanup the extremely WIP backmatter chapters. There’s a bunch of crap in there about me trying to do math math and failing, because math math doesn’t give two sniffs about constructability, and so none of it works out. If I’m feeling particularly plucky, I might try my hand at defining the reals, just because it might be fun.</p>
<p>As of today’s update, the book is now 360 pages long! I estimate it’ll be about 450 when it’s done, so we’re clearly making progress.</p>
<hr />
<p>Anyway, that’s all for today. If you’ve already bought the book, you can get the updates for free on <a href="https://leanpub.com/certainty-by-construction">Leanpub</a>. If you haven’t, might I suggest doing so? Your early support and feedback helps inspire me and ensure the book is as good as it can possibly be.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 2</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report2/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report2/index.html</guid>
      <pubDate>2023-05-18</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I’m writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you’re excited about, please do let me know!</p>
<hr />
<p>It’s week two of regular updates on Certainty by Construction, baby! This week I made 17 commits to the repository, half of which were towards the goal of improving the book’s typesetting. Spurred on by a bug report asking “what the hell does <code>AgdaCmd:MakeCase</code> mean?” I decided to upgrade the book’s build system. Now you should see explicit keystrokes to press when the book asks you to run a command alongside.</p>
<p>You’ll also notice intra-prose syntax highlighting, meaning that if the book mentions a type, it will now be presented in a beautiful blue, among other things in other colors. Agda has some janky support for this, but I couldn’t get it working, which means I annotated each and every piece of syntax highlighting by hand. Please file a bug if you notice I’ve missed any.</p>
<p>Content-wise, the old chapter on “structured sets” has become “relations”, and it has several new sections fleshing out the idea and giving several more examples. I’m now in the middle of rewriting the setoids chapter, but it too has three new sections, and thus the whole thing is no longer <em>all</em> about modular arithmetic.</p>
<p>Next week I’m going to continue powering on with the setoids chapter—including a big digression on what congruence entails under a setoid—and then I think I’ll tackle the ring solving chapter.</p>
<p>For the first time, this book seems like I might not be working on it for the rest of my life. It’s nowhere near done, but the topic and style are finally hashed out, and the content is mostly in an alpha state. From here it’s really just to continue grinding, rewriting all the crap bits over and over again, until they’re no longer crap.</p>
<hr />
<p>Anyway, that’s all for today. If you’ve already bought the book, you can get the updates for free on <a href="https://leanpub.com/certainty-by-construction">Leanpub</a>. If you haven’t, might I suggest doing so? Your early support and feedback helps inspire me and ensure the book is as good as it can possibly be.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Certainty by Construction Progress Report 1</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/cbc-report1/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/cbc-report1/index.html</guid>
      <pubDate>2023-05-12</pubDate>
      <content:encoded><![CDATA[
        <p>The following is a progress report for <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I’m writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you’re excited about, please do let me know!</p>
<hr />
<p>As part of a new ~quarterly goal, I’m going to be publishing updates to Certainty by Construction every Friday. This is for a few reasons: one, things get done much more quickly when you’re not doing them in private; two, relatedly, it’s good to get some exposure here and keep myself accountable.</p>
<p>Anyway, there are 26 new pages since last week, although a good deal of that is code without any prose around it yet. I’m in the process of cannibalizing the sections on relations and setoids into a single chapter. It’s a discussion of mathematical relations, their properties, an several examples. We explore different pre-orders, partial orders and total orders, and have a length digression about effectively designing indices for <code>data</code> types.</p>
<p>This last point arose from me spending a few hours trying to work out under which circumstances exactly Agda gets confused about whether or not a computing index will give rise to a constructor. My findings are that it’s not really about computing indices, so much as it is about Agda running out of variables in which it can pack constraints. I suspect this knowledge can be exploited to make more interesting constructors than I thought possible, but I haven’t worked out how to do it yet.</p>
<p>I’ve also been working on how to simplify some bigger setoid proofs, where you have a bunch of equational reasoning you’d like to do under congruence. The folklore on this is generally to introduce a lemma somewhere else, but this has always struck me as a disappointing solution. Modulo the concrete syntax, this seems to work pretty well:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">_</span>≈nested<span class="ot">_</span>[<span class="ot">_</span>]<span class="ot">_</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="ot">:</span> A</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">→</span> <span class="ot">{</span>f <span class="ot">:</span> A <span class="ot">→</span> A<span class="ot">}</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">→</span> <span class="ot">(</span>cong <span class="ot">:</span> <span class="ot">{</span>x y <span class="ot">:</span> A<span class="ot">}</span> <span class="ot">→</span> x ≈ y <span class="ot">→</span> f x ≈ f y<span class="ot">)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="ot">→</span> <span class="ot">{</span>x y z <span class="ot">:</span> A<span class="ot">}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="ot">→</span> x IsRelatedTo y</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="ot">→</span> f y IsRelatedTo z</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="ot">→</span> f x IsRelatedTo z</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ot">_</span> ≈nested cong [ relTo x=y ] <span class="ot">(</span>relTo fy=z<span class="ot">)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> relTo <span class="ot">(</span>trans <span class="ot">(</span>cong x=y<span class="ot">)</span> fy=z<span class="ot">)</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">2</span> <span class="ot">_</span>≈nested<span class="ot">_</span>[<span class="ot">_</span>]<span class="ot">_</span></span></code></pre></div>
<p>which lets you focus in on a particular sub-expression, and use a new equational reasoning block to rewrite that, before popping your results back to the full expression. As an example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>  ⌊ <span class="ot">((</span>a *H c<span class="ot">)</span> *x+ 0#<span class="ot">)</span> +H b *S c +H d *S a ⌋ * x + b * d</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>≈nested <span class="ot">(</span>+-congʳ ∘ *-congʳ<span class="ot">)</span> [  <span class="co">-- focus on subexpr</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  ⌊ <span class="ot">((</span>a *H c<span class="ot">)</span> *x+ 0#<span class="ot">)</span> +H b *S c +H d *S a ⌋</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>≈⟨ +H-+-hom <span class="ot">(((</span>a *H c<span class="ot">)</span> *x+ 0#<span class="ot">)</span> +H b *S c<span class="ot">)</span> <span class="ot">(</span>d *S a<span class="ot">)</span> x ⟩</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  ⌊<span class="ot">((</span>a *H c<span class="ot">)</span> *x+ 0#<span class="ot">)</span> +H b *S c ⌋ + ⟦ d *S a ⌋</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>≈⟨ +-congʳ <span class="ot">(</span>+H-+-hom <span class="ot">((</span>a *H c<span class="ot">)</span> *x+ 0#<span class="ot">)</span> <span class="ot">(</span>b *S c<span class="ot">)</span> x<span class="ot">)</span> ⟩</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  ⌊ a *H c ⌋ * x + 0# + ⌊ b *S c ⌋ + ⌊ d *S a ⌋</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>≈⟨ …via… *S-*-hom ⟩</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  ⌊ a *H c ⌋ * x + <span class="ot">(</span>b * ⌊ c ⌋<span class="ot">)</span> + <span class="ot">(</span>d * ⌊ a ⌋<span class="ot">)</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>≈⟨ +-congʳ <span class="ot">(</span>+-congʳ <span class="ot">(</span>*-congʳ <span class="ot">(</span>*H-*-hom a c x<span class="ot">)))</span> ⟩</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  ⌊ a ⌋ * ⌊ c ⌋ * x + b * ⌊ c ⌋ + d * ⌊ a ⌋</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>∎ ]                            <span class="co">-- pop back</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  <span class="ot">(</span>⌊ a ⌋ * ⌊ c ⌋ * x + b * ⌊ c ⌋ + d * ⌊ a ⌋<span class="ot">)</span> * x + <span class="ot">(</span>b * d<span class="ot">)</span></span></code></pre></div>
<p>The attentive reader here will notice that I have also clearly been improving the chapter on ring solving. Maybe I’m just better at proofs these days, but the whole thing feels much less challenging than my first few times looking at it.</p>
<hr />
<p>Anyway, that’s all for today. If you’ve already bought the book, you can get the updates for free on <a href="https://leanpub.com/certainty-by-construction">Leanpub</a>. If you haven’t, might I suggest doing so? Your early support and feedback helps inspire me and ensure the book is as good as it can possibly be.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>The Co-Blub Paradox</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/coblub/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/coblub/index.html</guid>
      <pubDate>2023-03-24</pubDate>
      <content:encoded><![CDATA[
        <p>The following is an excerpt from <a href="https://leanpub.com/certainty-by-construction">Certainty by Construction</a>, a new book I’m writing on learning and effectively wielding Agda. Writing a book is a tedious and demoralizing process, so if this is the sort of thing you’re excited about, please do let me know!</p>
<hr />
<p>It is widely acknowledged that the languages you speak shape the thoughts you can think; while this is true for natural language, it is doubly so in the case of programming languages. And it’s not hard to see why; while humans have dedicated neural circuitry for natural language, it would be absurd to suggest there is dedicated neural circuitry for fiddling around with the semantics of pushing around arcane symbol abstractly encoded as electrical potentials over a conductive metal.</p>
<p>Because programming—and mathematics more generally—does not come easily to us humans, it can be hard to see the forest for the trees. We have no built-in intuition as to what should be possible, and thus, this intuition is built by observing the artifacts created by more established practitioners. In these more “artificial” of human endeavors, newcomers to the field are truly constructivists—their methods for practicing the art are shaped only by their previously-observed patterns. Because different programming languages support different features and idioms, the imaginable shape of what programming <em>is</em> must be shaped by the languages we understand.</p>
<p>In a famous essay, “<a href="http://www.paulgraham.com/avg.html">Beating the Averages</a>,” Paul Graham points out the so-called <em>Blub paradox.</em> This, Graham says, is the ordering of programming languages by powerfulness; a programmer who thinks in a middle-of-the-road language along this ordering (call it Blub) can identify less powerful languages, but not those which are more powerful. The idea rings true; one can arrange languages in power by the features they support, and subsequently check to see if a language supports all the features felt to be important. If it doesn’t, it must be less powerful. However, this technique doesn’t work to identify more powerful languages—at best, you will see that the compared language supports all the features you’re looking for, but you don’t know enough to ask for more.</p>
<p>More formally, we can describe the Blub paradox as a semi-decision procedure. That is, given an ordering over programming languages (here, by “power”,) we can determine whether a language is less than our comparison language, but not whether it is more than. We can determine when the answer is definitely “yes,” but, not when it is “no!”</p>
<p>Over two decades of climbing this lattice of powerful languages, I have come to understand a lesser-known corollary of the Blub paradox, coining it the <em>Co-Blub paradox</em><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. This is the observation that knowledge of lesser languages is <em>actively harmful</em> in the context of a more powerful language. The hoops you unwittingly jumped through in Blub due to lacking feature X are <em>anti-patterns</em> in the presence of feature X. This is obviously true when stated abstractly, but insidious when one is in the middle of it.</p>
<p>Let’s look at a few examples over the ages, to help motivate the problem before we get into our introspection proper. In the beginning, people programmed directly in machine code. Not assembly, mind you, but in raw binary-encoded op-codes. They had a book somewhere showing them what bits needed to be set in order to cajole the machine into performing any given instruction. Presumably if this were your job, you’d come to memorize the bit patterns for common operations, and it wouldn’t be nearly as tedious as it seems today.</p>
<p>Then came assembly languages, which provided human-meaningful mnemonics to the computer’s opcodes. No longer did we need to encode a jump as <code>11111000110000001100</code> — now it was <code>jl 16</code>. Still mysterious, to be sure, but significant gains are realized in legibility. When encoded directly in machine code, programs were, for the most part, write-only. But assembly languages don’t come for free; first you need to write an assembler: a program that reads the mnemonics and outputs the raw machine code. If you were already proficient writing machine code directly, you can imagine the task of implementing an assembler to feel like make work—a tool to automate a problem you don’t have. In the context of the Co-Blub paradox, knowing the direct encodings of your opcodes is an anti-pattern when you have an assembly language, as it makes your contributes inscrutable among your peers.</p>
<p>Programming directly in assembly eventually hit its limits. Every computer had a different assembly language, which meant if you wanted to run the same program on a different computer you’d have to completely rewrite the whole thing; often needing to translate between extremely different concepts and limitations. Ignoring a lot of history, C came around with the big innovation that software should be portable between different computers: the same C program should work regardless of the underlying machine architecture. If you were an assembly programmer, you ran into the anti-pattern that while you could squeeze more performance and perform clever optimizations if you were aware of the underlying architecture, this fundamentally limited you <em>to that platform.</em></p>
<p>By virtue of being, in many ways, a unifying assembly language, C runs very close to what we think of as “the metal.” Although different computer architectures have minor differences in registers and ways of doing things, they are all extremely similar variations on a theme. They all expose storable memory indexed by a number, operations for performing basic logic and arithmetic tasks, and means of jumping around to what the computer should consider to be the next instruction. As a result, C exposes this abstraction of what a computer <em>is</em> to its programmers, who are thus required to think about mutable memory and about how to encode complicated objects as sequences of bytes in that memory. But then came Java, whose contribution to mainstream programming was to popularize the idea that memory is cheap and abundant, and thus OK to waste some in order to alleviate the headache of needing to track it all yourself. As a C programmer coming to Java, you must unlearn the idea that memory is sacred and scarce, that you can do a better job of keeping track of it than the compiler can, and, hardest of all, that it is an important thing to track in the first place.</p>
<p>There is a clear line of progression here; as we move up the lattice of powerful languages, we notice that more and more details of what we thought were integral parts of programming turn out to be not particularly relevant to the actual task at hand. However, the examples thus discussed are already known to the modern programmer. Let’s take a few steps further, into languages deemed esoteric in the present day. It’s easy to see and internalize examples from the past, but those staring us in the face are much more difficult to spot.</p>
<p>Compare Java then to Lisp, which—among many things—makes the argument that functions, and even <em>programs themselves,</em> are just as meaningful objects as are numbers and records. Where Java requires the executable pieces to be packaged up and moved around with explicit dependencies on the data it requires, Lisp just lets you write and pass around functions, which automatically carry around all the data they reference. Java has a <em>design pattern</em> for this called the “command pattern,” which requires much ado and ink to be spilled, while in Lisp it just works in a way that is hard to understand if you are used to thinking about computer programs as static sequences of instructions. Indeed, the command pattern is bloated and ultimately unnecessary in Lisp, and practitioners must first unlearn it before they can begin to see the beauty of Lisp.</p>
<p>Haskell takes a step further than Lisp, in that it restricts when and where side-effects are allowed to occur in a program. This sounds like heresy (and feels like it for the first six months of programming in Haskell) until you come to appreciate that <em>almost none</em> of a program needs to perform side-effects. As it happens, side-effects are the only salient observation of the computer’s execution model, and by restricting their use, Haskell frees its programmers from needing to think about how the computer will execute their code—promising only that it will. As a result, Haskell code looks much more like mathematics than it looks like a traditional computer program. Furthermore, by abstracting away the execution model, the runtime is free to parallelize and reorder code, often even eliding unnecessary execution altogether. The programmer who refuses to acknowledge this reality and insists on coding with side-effects pays a great price, both on the amount of code they need to write, in its long-term reusability, and, most importantly, in the correctness of their computations.</p>
<p>All of this brings us to Agda, which is as far as I’ve gotten along the power lattice of programming languages. While Agda looks a great deal like Haskell, its powerful typesystem allows us to articulate many invariants that are impossible to write down in other languages. It’s tempting to think about Agda as Haskell-but-with-better-types, but this is missing the point. Agda’s type system is so precise we can <em>prove</em> that our solutions are correct, which alleviates the need to actually <em>run</em> the subsequent programs. In essence, programming in Agda abstracts away the notion of execution entirely. Following our argument about co-Blub programmers, they will come to Agda with the anti-pattern that thinking their hard-earned, battle-proven programming techniques for wrangling runtime performance will come in handy. But this is not the case; most of the techniques we have learned and consider “computer science” are in fact <em>implementation ideas:</em> that is, specific realizations from infinite classes of solutions, chosen not for their simplicity or clarity, but for their <em>efficiency.</em></p>
<p>Thus, the process of learning Agda, in many ways, is learning to separate the beautiful aspects of problem solving from the multitude of clever hacks we have accumulated over the years. Much like the fish who is unable to recognize the ubiquitous water around him, as classically-trained programmers, it is nigh-impossible to differentiate the salient points from the implementation details until we find ourselves in a domain where they do not overlap. Indeed, in Agda, you will often feel the pain of having accidentally conflated the two, when your proofs end up being much more difficult than you feel they deserve. Despite the pain and the frustration, this is in fact a feature, and not a bug. It is a necessary struggle, akin to the type-checker informing you that your program is wrong. While it can be tempting to blame the tool, the real fault is in the workmanship.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>Although precisely speaking, the name should be the co-(Blub paradox), as the corollary applies to the paradox as a whole, not only the Blub piece. Alas, such is an awkward construction in English, and thus we will not use it.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
      ]]></content:encoded>
  </item>
  <item>
      <title>Abusing Constraints for Automatic Documentation</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/abusing-constraints/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/abusing-constraints/index.html</guid>
      <pubDate>2023-01-03</pubDate>
      <content:encoded><![CDATA[
        <h2 id="constraints"><a href="#constraints" class="header-link">Constraints<span class="header-link-emoji">🔗</span></a></h2>
<p><a href="https://github.com/wireapp/wire-server/pull/2950">At work I was recently tasked with figuring out what API calls our program makes</a>, and more interestingly, which code-paths lead to those API calls. Determining this by hand is tedious and error-prone, and worse, doesn’t stay up to date with code changes. Instead, let’s see how we can use the type system to eliminate the pain.</p>
<p>The existing code was organized around a class <code>HasAPI</code> that looks something like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span>  <span class="dt">HasAPI</span><span class="ot"> ::</span> <span class="dt">Service</span> <span class="ot">-&gt;</span> <span class="dt">Symbol</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">HasAPI</span> srv name <span class="kw">where</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> <span class="dt">APICall</span> srv name</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  callAPI ::</span> <span class="dt">APICall</span> srv name</span></code></pre></div>
<p>Here, <code>HasAPI</code> is a type class with an associated type family <code>APICall</code> which gives the type for making the call. For example, there might be an instance:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">HasAPI</span> <span class="dt">ShoutService</span> <span class="st">&quot;shout&quot;</span> <span class="kw">where</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> <span class="dt">APICall</span> <span class="dt">ShoutService</span> <span class="st">&quot;shout&quot;</span> <span class="ot">=</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  callAPI str <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="fu">fmap</span> <span class="fu">toUpper</span> str</span></code></pre></div>
<p>This is a silly example — the real codebase makes actual API calls — but it serves for demonstration.</p>
<p>Our goal is to document every codepath that makes any use of <code>callAPI</code>, in some sense, “infecting” every path with some marker of that fact. This is a common experience to Haskell programmers; in fact, <code>IO</code> has this same pattern of infectiousness. Whenever you make a function perform IO, every type in the callstack needs to document the fact it performs <code>IO</code>. This is the inspiration we will take, except that changing types is extremely expensive. What if we pushed a constraint around instead?</p>
<h3 id="propagating-constraints"><a href="#propagating-constraints" class="header-link">Propagating Constraints<span class="header-link-emoji">🔗</span></a></h3>
<p>The trick is to define a new class, of the same shape as <code>HasAPI</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span>  <span class="dt">CallsAPI</span><span class="ot"> ::</span> <span class="dt">Service</span> <span class="ot">-&gt;</span> <span class="dt">Symbol</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">CallsAPI</span> srv name</span></code></pre></div>
<p>but crucially, we give <code>CallsAPI</code> <em>no instances.</em> On first blush, this seems insane: why introduce a class with no methods and no instances? Having no methods means it can’t do anything useful. Having no instances means GHC can never eliminate the constraint, and thus must propagate it upwards. This is the infectiousness we want; any function which makes an API call must document that fact in its type — failure to do so will result in GHC failing to compile with the message <code>No instance for (CallsAPI srv name)</code>.</p>
<p>The trick now is to ensure that <code>callsAPI</code> produces a <code>CallsAPI</code> constraint. The easy way to do this is a little renaming to ensure existing polymorphic code continues work:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span>  <span class="dt">UnsafeHasAPI</span><span class="ot"> ::</span> <span class="dt">Service</span> <span class="ot">-&gt;</span> <span class="dt">Symbol</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">UnsafeHasAPI</span> srv name <span class="kw">where</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> <span class="dt">APICall</span> srv name</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  unsafeCallAPI ::</span> <span class="dt">APICall</span> srv name</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">HasAPI</span><span class="ot"> ::</span> <span class="dt">Service</span> <span class="ot">-&gt;</span> <span class="dt">Symbol</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">HasAPI</span> <span class="ot">=</span> (<span class="dt">UnsafeHasAPI</span> srv name, <span class="dt">CallsAPI</span> srv name)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>callAPI</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="kw">forall</span> srv name</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>   <span class="op">.</span> <span class="dt">HasAPI</span> srv name</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">APICall</span> srv name</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>callAPI <span class="ot">=</span> unsafeCallAPI</span></code></pre></div>
<p>Any code written against the old <code>HasAPI</code> constraint will continue to work (modulo the instance definitions,) but concrete calls to <code>callAPI</code> now result in a dangling, unsatisfiable <code>CallsAPI</code> constraint. You’ll need to go through the codebase now, and document every transitive call to the API with matching <code>CallsAPI</code> constraints. Thankfully, HLS can help with this task: it will underline the missing cases, and suggest a code action that will automatically add these constraints to the type. Rinse and repeat, until every code path is documented.</p>
<p>Great success! We have automatically found every codepath that makes an API call, and forced them to document that fact. Better yet, we have solved the problem once and for all; our coworkers also must document any new API calls they make, lest their code not compile. It seems like we’re done!</p>
<p>Except for one fact: GHC will rudely refuse to compile our project, even if we correctly track all of our API calls. The problem of course, is that all we have managed to do is force <code>main</code> to collect every <code>CallsAPI</code> constraint. But GHC will still complain <code>No instance for (CallsAPI srv name)</code>. Of course, you could just give an orphan instance in the same module that defines <code>main</code>, which would work, but this doesn’t give you any sort of <em>external documentation.</em> It’s nice when you read the code, but it doesn’t help the business people.</p>
<h2 id="solving-the-unsolvable"><a href="#solving-the-unsolvable" class="header-link">Solving The Unsolvable<span class="header-link-emoji">🔗</span></a></h2>
<p>A better approach here is to selectively solve the <code>CallsAPI</code> constraints, which we can do with some Haskell dark magic. The <code>Dict</code> type captures a constraint, giving us a convenient way to manipulate constraints:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Dict</span><span class="ot"> ::</span> <span class="dt">Constraint</span> <span class="ot">-&gt;</span> <span class="dt">Type</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Dict</span> c <span class="kw">where</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Dict</span><span class="ot"> ::</span> c <span class="ot">=&gt;</span> <span class="dt">Dict</span> c</span></code></pre></div>
<p>We can write an eliminator to bring the <code>c</code> from a <code>Dict c</code> into scope, which, importantly, allows us to solve otherwise-unsolved constraints:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(\\)<span class="ot"> ::</span> (c <span class="ot">=&gt;</span> r) <span class="ot">-&gt;</span> <span class="dt">Dict</span> c <span class="ot">-&gt;</span> r</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>f \\ <span class="dt">Dict</span> <span class="ot">=</span> f</span></code></pre></div>
<p>If we can get our hands on a <code>Dict (CallsAPI Srv Name)</code>, we can use <code>(\\)</code> to convince GHC to compile our program.</p>
<p>GHC is happy to give us dictionaries for constraints it knows about:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">showIntDict ::</span> <span class="dt">Dict</span> (<span class="dt">Show</span> <span class="dt">Int</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>showIntDict <span class="ot">=</span> <span class="dt">Dict</span></span></code></pre></div>
<p>but unfortunately, refuses to give us dictionaries for unsolved constraints:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">callsAPIDict ::</span> <span class="kw">forall</span> srv name<span class="op">.</span> <span class="dt">Dict</span> (<span class="dt">CallsAPI</span> srv name)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>callsAPIDict <span class="ot">=</span> <span class="dt">Dict</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- Error: No instance for (CallsAPI srv name)</span></span></code></pre></div>
<p>It seems like we’re just as stuck, but we have a trick up our sleeve. The first step is to define another class with an instance in scope. GHC will happily give us a dictionary for such a thing:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Trivial</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Trivial</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ot">trivialDict ::</span> <span class="dt">Dict</span> <span class="dt">Trivial</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>trivialDict <span class="ot">=</span> <span class="dt">Dict</span></span></code></pre></div>
<p>and now for something naughty:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">callsAPIDict ::</span> <span class="kw">forall</span> srv name<span class="op">.</span> <span class="dt">Dict</span> (<span class="dt">CallsAPI</span> srv name)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>callsAPIDict <span class="ot">=</span> unsafeCoerce trivialDict</span></code></pre></div>
<p>Behind the scenes, GHC compiles classes into records, instances into values of these records, and replaces wanted constraints with function arguments taking those records. By ensuring that <code>Trivial</code> and <code>CallsAPI</code> are both empty classes, with no methods or super-classes, we can be certain the generated records for these classes will be identical, and thus that it is OK to coerce one into the other.</p>
<p>Armed with <code>withDict</code> and <code>callsAPIDict</code>, we can play the part of the constraint solver and satisfy constraints ourself. GHC will happily compile the following example:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">ex ::</span> <span class="dt">HasAPI</span> <span class="dt">ShoutService</span> <span class="st">&quot;shout&quot;</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>ex <span class="ot">=</span> callAPI <span class="op">@</span><span class="dt">ShoutService</span> <span class="op">@</span><span class="st">&quot;shout&quot;</span> <span class="st">&quot;hello world&quot;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- Look ma, no HasAPI constraint!</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="ot">test ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>test <span class="ot">=</span> ex \\ callsAPIDict <span class="op">@</span><span class="dt">ShoutService</span> <span class="op">@</span><span class="st">&quot;shout&quot;</span></span></code></pre></div>
<p>So that’s the rough technique. But how do we actually use it in anger?</p>
<h3 id="automatically-documenting-the-server"><a href="#automatically-documenting-the-server" class="header-link">Automatically Documenting the Server<span class="header-link-emoji">🔗</span></a></h3>
<p>Our actual use case at work is to add these API calls to our swagger documentation. Swagger is this automatically generated manifest of an API surface; we want to document the fact that some API calls might call other ones. Our server is one big servant application, and servant is extensible. So the real technique is to build a servant combinator that eliminates <code>HasAPI</code> constraints when you document them in the API definition.</p>
<p>Getting into the nitty gritty bits of servant is beyond the scope of this post, but we can sketch the idea. Servant APIs use the type-level <code>(:&gt;)</code> operator to combine information about an endpoint. For example, we might expose another service:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">ServantAPI</span> <span class="ot">=</span> <span class="st">&quot;api&quot;</span> <span class="op">:&gt;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;echo&quot;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>      <span class="op">:&gt;</span> <span class="dt">ReqBody</span> &#39;[<span class="dt">JSON</span>] <span class="dt">String</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>      <span class="op">:&gt;</span> <span class="dt">Get</span> &#39;[<span class="dt">JSON</span>] <span class="dt">String</span></span></code></pre></div>
<p>This definition states that we have a REST server with a single route, <code>api/echo</code> which responds to <code>POST</code> requests, returning a JSON-encoded string, which takes a JSON-encoded string as the request body.</p>
<p>A servant server for <code>ServantAPI</code> would have type <code>Server ServantAPI</code>, where <code>Server</code> is a type family given by <code>HasServer</code>. Evaluating the type family results in <code>String -&gt; Handler String</code>, so in order to implement this server, we would need to provide a function of that type.</p>
<p>Let’s implement our server endpoint:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>echo</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    ::</span> <span class="dt">CallsAPI</span> <span class="dt">ShoutService</span> <span class="st">&quot;shout&quot;</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">String</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">Handler</span> <span class="dt">String</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>echo str <span class="ot">=</span> liftIO <span class="op">$</span> callAPI <span class="op">@</span><span class="dt">ShoutService</span> <span class="op">@</span><span class="st">&quot;shout&quot;</span> str</span></code></pre></div>
<p>Unfortunately, due to our earlier work, we can’t eliminate the <code>CallsAPI</code> constraint, and thus we can’t actually use <code>echo</code> as the handler for our endpoint.</p>
<p>It’s important to note that servant’s DSL is extensible, and we can add our own machinery here. The first step is to build a type that we can use in servant:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">MakesAPICall</span><span class="ot"> ::</span> <span class="dt">Service</span> <span class="ot">-&gt;</span> <span class="dt">Symbol</span> <span class="ot">-&gt;</span> <span class="dt">Type</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">MakesAPICall</span> srv name</span></code></pre></div>
<p>We can now build a second version of <code>ServantAPI</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">ServantAPI</span> <span class="ot">=</span> <span class="st">&quot;api&quot;</span> <span class="op">:&gt;</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;echo&quot;</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>      <span class="op">:&gt;</span> <span class="dt">MakesAPICall</span> <span class="dt">ShoutService</span> <span class="st">&quot;shout&quot;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>      <span class="op">:&gt;</span> <span class="dt">ReqBody</span> &#39;[<span class="dt">JSON</span>] <span class="dt">String</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>      <span class="op">:&gt;</span> <span class="dt">Get</span> &#39;[<span class="dt">JSON</span>] <span class="dt">String</span></span></code></pre></div>
<p>In order to actually run our endpoint, we need to give an instance of <code>HasServer</code> for our new <code>MakesAPICall</code> combinator:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">HasServer</span> api ctx</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>      <span class="ot">=&gt;</span> <span class="dt">HasServer</span> (<span class="dt">MakesAPICall</span> srv name <span class="op">:&gt;</span> api) ctx</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>         <span class="kw">where</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> <span class="dt">ServerT</span> (<span class="dt">MakesAPICall</span> srv name <span class="op">:&gt;</span> api) m <span class="ot">=</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Dict</span> (<span class="dt">CallsFed</span> srv name) <span class="ot">-&gt;</span> <span class="dt">ServerT</span> api m</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  route _ ctx f <span class="ot">=</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    route (<span class="dt">Proxy</span> <span class="op">@</span>api) ctx <span class="op">$</span> <span class="fu">fmap</span> (<span class="op">$</span> callsAPIDict <span class="op">@</span>srv <span class="op">@</span>name) f</span></code></pre></div>
<p>The <code>ServerT</code> instance here adds a <code>Dict (CallsFed srv name)</code> to the type of the handler required to satisfy this endpoint, while <code>route</code> automatically fills in the dictionary whenever the handler needs to be run. In an ideal world, we could give our <code>ServerT</code> instance as:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> <span class="dt">ServerT</span> (<span class="dt">MakesAPICall</span> srv name <span class="op">:&gt;</span> api) m <span class="ot">=</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">CallsFed</span> srv name <span class="ot">=&gt;</span> <span class="dt">ServerT</span> api m</span></code></pre></div>
<p>but GHC doesn’t let us use quantified types on the right-hand sides of type families, so this is unfortunately a no-go. Playing games with <code>Dict</code> instead is the best approach I’ve found here, but I’d love to hear if anyone has a better idea.</p>
<p>We still can’t use <code>echo</code> as a handler, but we can use <code>makesCall echo</code> as one, where <code>makesCall</code> is given as:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ot">makesCall ::</span> (c <span class="ot">=&gt;</span> r) <span class="ot">-&gt;</span> <span class="dt">Dict</span> c <span class="ot">-&gt;</span> r</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>makesCall <span class="ot">=</span> (\\)</span></code></pre></div>
<p>Servers that document their API calls via <code>MakesAPICall</code> and which wrap their handlers with <code>makesCall</code> can now eliminate <code>CallsFed</code> constraints. Since this is the only way of eliminating <code>CallsFed</code> constraints, we can be sure that every API call is correctly documented in the servant DSL!</p>
<p>The final step here is to add an instance of <code>HasSwagger (MakesAPICall srv name :&gt; api)</code>, but the details are gory and devoid of educational value. Suffice it to say that this instance was written, and now we have automatically generated JSON documentation describing which server endpoints make which other API calls. This documentation is guaranteed to be correct, because updating it is the only way to convince GHC to compile your code.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Why Is the Web So Monotonous? Google.</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/monotonous-web/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/monotonous-web/index.html</guid>
      <pubDate>2022-08-04</pubDate>
      <content:encoded><![CDATA[
        <p>Does it ever feel like the internet is getting worse? That’s been my impression for the last decade. The internet feels now like it consists of ten big sites, plus fifty auxiliary sites that come up whenever you search for something outside of the everyday ten. It feels like it’s harder to find amateur opinions on matters, except if you look on social media, where amateur opinions are shared, unsolicited, with much more enthusiasm than they deserve. The accessibility of the top ten seems like it collapses the internet into a monoculture of extremism, and, perhaps even more disappointingly, a monoculture that echos the offline world.</p>
<p>Contrast this to the internet of yore. By virtue of being hard to access, the internet filtered away the mass appeal it has today. It was hard and expensive to get on, and in the absence of authoring tools, you were only creating internet content if you <em>had something to say.</em> Which meant that, as a consumer, if you found something, you had good reason to believe it was well-informed. Why would someone go through the hassle of making a website about something they weren’t interested in?</p>
<p>In 2022, we have a resoundingly sad answer to that question: advertising. The primary purpose of the web today is “engagement,” which is Silicon Valley jargon for “how many ads can we push through someone’s optical nerve?” Under the purview of engagement, it makes sense to publish webpages on every topic imaginable, regardless of whether or not you know what you’re talking about. In fact, engagement goes up if you <em>don’t</em> know what you’re talking about; your poor reader might mistakenly believe that they’ll find the answer they’re looking for elsewhere on your site. That’s twice the advertising revenue, baby!</p>
<p>But the spirit of the early web isn’t gone: the bookmarks I’ve kept these long decades mostly still work, and many of them still receive new content. There’s still weird, amateur, passion-project stuff out there. It’s just hard to find. Which brings us to our main topic: search.</p>
<p>Google is inarguably the front page of the internet. Maybe you already know where your next destination is, in which case you probably search for the website on Google and click on the first link, rather than typing in the address yourself. Or maybe you don’t already know your destination, and you search for it. Either way, you hit Google first.</p>
<p>When I say the internet is getting worse, what I really mean is that the Google search results are significantly less helpful than they used to be. This requires some qualification. Google has gotten exceedingly good at organizing everyday life. It reliably gets me news, recipes, bus schedules, tickets for local events, sports scores, simple facts, popular culture, official regulations, and access to businesses. It’s essentially the yellow pages and the newspaper put together. For queries like this, which are probably 95% of Googles traffic, Google does an excellent job.</p>
<p>The difficulties come in for that other 5%, the so-called “long tail.” The long tail is all those other things we want to know about. Things without well-established, factual answers. Opinions. Abstract ideas. Technical information. If you’re cynical, perhaps it’s all the stuff that doesn’t have wide-enough appeal to drive engagement. Whatever the reason, the long tail is the stuff that’s hard to find on the modern internet.</p>
<p>Notice that the long-tail is exactly the stuff we need search for. Mass-appeal queries are, almost by definition, not particularly hard to find. If I need a bus schedule, I know to talk to my local transit authority. If I’m looking to keep up with the Kardashians, I’m not going to have any problems (at least, no <em>search</em> problems.) On the other hand, it’s much less clear where to get information on why my phone starts overheating when I open the chess app.</p>
<p>So what happens if you search for the long tail on Google? If you’re like me, you flail around for ten minutes wasting your time reading crap articles before you remember that Google is awful for the long tail, and you come away significantly more frustrated, not having found what you were looking for in the first place.</p>
<p>Lets look at some examples. One of my favorite places in the world is Koh Lanta, Thailand. When traveling, <a href>I’m always on the lookout</a> for places that give off the Koh Lanta vibe. What does that mean? Hard to say, exactly, but having tourist amenities without being touristy. Charming, slow, cheap. I don’t know exactly; if I did, it’d be easier to find. Anyway, forgetting that Google is bad at long tails, I search for <code>what is the koh lanta of croatia?</code> and get:</p>
<ul>
<li>Koh-Lanta - Wikipedia [note: not the island, the game show]</li>
<li>Top 15 Unique Things to Do in Koh Lanta</li>
<li>Visit Koh Lanta on a trip to Thailand</li>
<li>Beautiful places to travel, Koh lanta, Sunset</li>
<li>Holiday Vacation to Koh Lanta: Our favourite beaches and …</li>
<li>Koh Lanta Activities: 20 Best Things to Do</li>
<li>etc</li>
</ul>
<p>With the exception of “find a flight from Dubrovnik to Koh Lanta” on page two, you need to get to page five before you see any results that even acknowledge I <em>also</em> searched for <code>croatia</code>. Not very impressive.</p>
<p>When you start paying attention, you’ll notice it on almost every search — Google isn’t actually giving you answers to things you searched for. Now, maybe the reason here is that there <em>aren’t</em> any good results for the query, but that’s a valuable thing to know as well. Don’t just hit me with garbage, it’s an insult to my intelligence and time.</p>
<h2 id="where-things-go-wrong"><a href="#where-things-go-wrong" class="header-link">Where Things Go Wrong<span class="header-link-emoji">🔗</span></a></h2>
<p>I wanted to figure out why exactly the internet is getting worse. What’s going on with Google’s algorithm that leads to such a monotonous, boring, corporate internet landscape? I thought I’d dig into search engine optimization (SEO) — essentially, techniques that improve a website’s ranking in Google searches. I’d always thought SEO was better at selling itself than it was at improving search results, but my god was I wrong.</p>
<p>SEO techniques are extremely potent, and their widespread adoption is what’s wrong with the modern web.</p>
<p>For example, have you ever noticed that the main content of most websites is something like 70% down the page? Every recipe site I’ve ever seen is like this — nobody cares about how this recipe was originally your great-grandmother’s. Just tell us what’s in it. Why is this so prevalent on the web?</p>
<p>Google rewards a website for how long a user stays on it, with the reasoning being that a bad website has the user immediately hit the back button. Seems reasonable, until you notice the problem of incentives here. Websites aren’t being rewarded for having good content under this scheme, they’re rewarded for wasting your time and making information hard to find. Outcome: websites that answer questions, but hide the information somewhere on a giant (ad-filled) page.</p>
<p>Relatedly, have you noticed how every website begins with a stupid paragraph overviewing the thing you’re searching for? It’s always followed by a stupid paragraph describing why you should care about the thing. For example, I just searched for <code>garden irrigation</code>, and the first result is:</p>
<blockquote>
<p>Water is vital to plant health, but watering by hand can be a hassle. You have to drag hoses between gardens, move sprinklers around, or take the time to water each plant. Our innovative watering systems take the hassle out of watering. They’re the easiest way to give plants the consistent moisture they need for your biggest harvest and most beautiful blooms.</p>
</blockquote>
<p><em>Water is vital to plant health.</em> Wow, who knew! Why in god’s name would I be searching for garden irrigation if I didn’t know that water was vital to plant health. Why is copy like this so prevalent on the web?</p>
<p>Things become clearer when you look at some of the context of this page:</p>
<blockquote>
<p>Url: https://[redacted]/how-to/how-to-choose-a-watering-system/8747.html</p>
<p>Title: How to Choose a Garden Irrigation System</p>
<p>Heading: Soak, Drip or Spray: Which is right for you?</p>
<p>Subheading: Choose the best of our easy, customizable, irrigation systems to help your plants thrive and save water</p>
</blockquote>
<p>As it happens, Google rewards websites which use keywords in their url, title, headings, and first 100 words. Just by eyeballing, we can see that this particular website is targeting the keywords “water”, “system”, “irrigation”, and “garden”. Pages like these hyper-optimized to come up for particular searches. The stupid expository stuff exists only to pack “important keywords” into the first 100 words.</p>
<p>But keyword targeting doesn’t stop there. As I was reading through this SEO stuff (that is, the first page of a Google search for <code>seo tricks</code>,) every single page offered 15-25 great, technical SEO tricks. And then, without fail, the final point on each page was “but really, the best SEO strategy is having great content!” That’s weird. “Great content” isn’t something an algorithm can identify; if it were, you wouldn’t be currently reading the ravings of a madman, angry about the state of the internet.</p>
<p>So, why do all of these highly-optimized SEO pages ubiquitously break form, switching from concrete techniques to platitudes? You guessed it, it’s a SEO technique! Google offers a keyword dashboard, where you can see which keywords group together, and (shudder) which keywords are <em>trending.</em> Google rewards you for having other keywords in the group on your page. And it extra rewards you for having trending keywords. You will not be surprised to learn that “quality content” is a keyword that clusters with “seo,” nor that it is currently a trending keyword.</p>
<p>Think about that for a moment. Under this policy, Google is incentivizing pages to become <em>less focused,</em> by adding text that is only tangentially related. But, how do related keywords come about? The only possible answer here is to find keywords that often cluster on other pages. But this is a classic death spiral, pulling every page in a topic to have the same content.</p>
<p>Another way of looking at it is that if you are being incentivized, you are being <em>disincentivized.</em> Webpages are being penalized for including original information, because original information can’t possibly be in the keyword cluster.</p>
<p>There are a multitude of perverse incentives from Google, but I’ll mention only two more. The first is that websites are penalized for having low-ranking pages. The conventional advice here is to delete “underperforming” pages, which only makes the search problem worse — sites are being rewarded for deleting pages that don’t align with the current search algorithm.</p>
<p>My last point: websites are penalized for even <em>linking</em> to low-ranking pages!</p>
<p>It’s not hard to put all of the pieces together and see why the modern web is so bland and monotonous. Not only is the front-page of the internet aggressively penalizing websites which <em>aren’t</em> bland and monotonous, it’s also punishing any site which has the audacity to link to more interesting parts of the web.</p>
<h2 id="how-culpable-is-google"><a href="#how-culpable-is-google" class="header-link">How Culpable is Google?<span class="header-link-emoji">🔗</span></a></h2>
<p>So the discoverable part of web sucks. But is that really Google’s fault? I’d argue no. By virtue of being the front-page, Google’s search results are under extreme scrutiny. In the eyes of the non-technical population, especially the older generations, the internet and Google are synonymous. The fact is that Google gets unfairly targeted by legislation because it’s a big, powerful tech company, and we as a society are uncomfortable with that.</p>
<p>Worse, the guys doing the regulation don’t exactly <a href="https://youtu.be/wmuROTmazco?t=71">have a grasp</a> on how internet things work.</p>
<p>Society at large has been getting very worried about disinformation. Who’s problem is that? Google’s — duh. Google is how we get information on the internet, so it’s up to them to defend us from disinformation.</p>
<p>Unfortunately it’s really hard to spot disinformation. Sometimes even the <em>government</em> lies to us (gasp!). I can think of two ways of avoiding getting in trouble with respect to disinformation. One: link only to <em>official sites,</em> thus changing the problem of trustworthiness to one of authority. If there is no authority, just give back the consensus. Two: don’t return any information whatsoever.</p>
<p>Google’s current strategy seems to be somewhere between one and two. For example, we can try a controversialish search like <code>long covid doesn&#39;t exist</code>. The top results at time of writing are:</p>
<ol type="1">
<li>The search for Long Covid (science.org)</li>
<li>Small Study Finds No Obvious Physical Causes for Long COVID (medscape.com)</li>
<li>Fact Check-‘Long COVID’ is not fake, quoted French study did … (reuters.com)</li>
<li>Harvard Medical School expert explains ‘long COVID’ (harvard.edu)</li>
<li>Claim that French study showed long COVID doesn’t exist … (healthfeedback.org)</li>
<li>What doctors wish patients knew about long COVID (ama-assn.org)</li>
</ol>
<p>I’m not particularly in the know, but I recognize most of these organizations. Science.org sounds official. Not only is one of the pages from Harvard, but also it’s from a Harvard Medical School <em>expert.</em> I especially like the fifth one, the metadata says:</p>
<blockquote>
<p>Claim: Long COVID is “mostly a mental disease”; the condition long COVID is solely due to a person’s belief, not actual disease; long COVID doesn’t exist</p>
<p>Fact check by Health Feedback: Inaccurate</p>
</blockquote>
<p>Every one of these websites comes off as <em>authoritative</em> — not in sense of “knowing what they’re talking about” because that’s hard to verify — but in the sense of being the sort of organization we’d trust to answer this question for us. Or, in the case of number five, at least telling us that they fact checked it.</p>
<p>Let’s try a search for something requiring less authority, like “best books.” In the past I would get a list of books considered the best. But now I get:</p>
<ol type="1">
<li>The Greatest Books: The Best Books of All Time - 1 to 50</li>
<li>The Best Books of All Time | chapters.indigo.ca</li>
<li>100 Best Books of All Time - Reader’s Digest</li>
<li>Best Book Lists - Goodreads</li>
<li>Best Books 2022: Books We Love : NPR</li>
</ol>
<p>You’ll notice there are no actual books here. There are only <em>lists</em> of best books. Cynical me notes that if you were to actually list a book, someone could find it controversial. Instead, you can link to institutional websites, and let them take the controversy for their picks.</p>
<p>This isn’t the way the web needs to be. Google could just as well given me personal blogs of people talking about long covid and their favorite books, except (says cynical me) that these aren’t authoritative sources, and thus, linking to them could be considered endorsement. And the web is too big and too fast moving to risk linking to anything that hasn’t been vetted in advance. It’s just too easy to accidentally give a <em>good</em> result to a controversial topic, and have the law makers pounce on you. Instead, punt the problem back to authorities.</p>
<p>The web promised us a democratic, decentralized public forum, and all we got was the stinking yellow pages in digital format. I hope the crypto people can learn a lesson here.</p>
<p>Anyway, all of this is to say that I think lawmakers and liability concerns are the real reason the web sucks. All things being equal, Google would like to give us good results, but it prefers making boatloads of money, and that would be hard to do if it got regulated into nothingness.</p>
<h2 id="a-note-on-other-search-engines"><a href="#a-note-on-other-search-engines" class="header-link">A Note on Other Search Engines<span class="header-link-emoji">🔗</span></a></h2>
<p>Google isn’t the only search engine around. There are others, but it’s fascinating that none of them compete on the basis of providing better results. DDG claims to have better privacy. Ecosia claims to plant trees. Bing exists to keep Microsoft relevant post-2010, and for some reason, ranks websites for being highly-shared on social media (again, things that are, by definition, not hard to find.)</p>
<p>Why don’t other search engines compete on search results? It can’t be hard to do better than Google for the long tail.</p>
<h2 id="what-can-we-do"><a href="#what-can-we-do" class="header-link">What Can We Do?<span class="header-link-emoji">🔗</span></a></h2>
<p>It’s interesting to note that the problems of regulatory-fear and SEO-capture are functions of Google’s cultural significance. If Google were smaller or less important, there’d be significantly less negative-optimization pressure on it. Google is a victim of its own success.</p>
<p>That is to say, I don’t think all search engines are doomed to fail in the same way that Google has. A small search engine doesn’t need to be authoritative, because nobody is paying attention to it. And it doesn’t have to worry about SEO for the same reason — there’s no money to be made in manipulating its results.</p>
<p>What I dream of is Google circa 2006. A time where a search engine searched what you asked for. A time before aggressive SEO. A time before social media, when the only people on the internet had a reason to be there. A time before sticky headers and full-screen modal pop-ups asking you to subscribe to a newsletter before reading the article. A time before click-bait and subscription-only websites which tease you with a paragraph before blurring out the rest of the content.</p>
<p>These problems are all solvable with by a search engine. But that search engine isn’t going to be Google. Let’s de-rank awful sites, and boost personal blogs of people with interesting things to say. Let’s de-rank any website that contains ads. Let’s not index any click-bait websites, which unfortunately in 2022 includes most of the news.</p>
<p>What we need is a search engine, by the people, and for the people. Fuck the corporate interests and the regulatory bullshit. None of this is hard to do. It just requires someone to get started.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Review: Proof-Carrying Code</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html</guid>
      <pubDate>2022-03-22</pubDate>
      <content:encoded><![CDATA[
        <!--
<pre class="Agda"><a id="146" class="Keyword">module</a> <a id="153" href="blog.proof-carrying-code.html" class="Module">blog.proof-carrying-code</a> <a id="178" class="Keyword">where</a>

<a id="185" class="Keyword">open</a> <a id="190" class="Keyword">import</a> <a id="197" href="Data.Nat.html" class="Module">Data.Nat</a>
<a id="206" class="Keyword">open</a> <a id="211" class="Keyword">import</a> <a id="218" href="Data.Vec.html" class="Module">Data.Vec</a>
<a id="227" class="Keyword">open</a> <a id="232" class="Keyword">import</a> <a id="239" href="Data.Fin.html" class="Module">Data.Fin</a>
</pre>-->
<p>A few months ago, the excellent <a href="https://davidrusu.github.io/">David Rusu</a> gave me an impromptu lecture on <a href="https://en.wikipedia.org/wiki/Ring_signature">ring signatures</a>, which are a way of signing something as an anonymous member of a group. That is, you can show someone in the signing pool was actually responsible for signing the thing, but can’t determine <em>which member of the pool actually signed it.</em> David walked me through all the math as to how that actually happens, but I was unable to follow it, because the math was hard and, perhaps more importantly, it felt like hand-compiling a proof.</p>
<p>What do I mean by “hand-compiling” a proof? Well, we have some mathematical object, something like</p>
<pre class="Agda"><a id="1003" class="Keyword">postulate</a>
  <a id="Identity"></a><a id="1015" href="blog/proof-carrying-code/index.html#1015" class="Postulate">Identity</a> <a id="1024" class="Symbol">:</a> <a id="1026" href="Agda.Primitive.html#320" class="Primitive">Set</a>
  <a id="Message"></a><a id="1032" href="blog/proof-carrying-code/index.html#1032" class="Postulate">Message</a> <a id="1040" class="Symbol">:</a> <a id="1042" href="Agda.Primitive.html#320" class="Primitive">Set</a>
  <a id="SignedBy"></a><a id="1048" href="blog/proof-carrying-code/index.html#1048" class="Postulate">SignedBy</a> <a id="1057" class="Symbol">:</a> <a id="1059" href="blog/proof-carrying-code/index.html#1032" class="Postulate">Message</a> <a id="1067" class="Symbol">→</a> <a id="1069" href="blog/proof-carrying-code/index.html#1015" class="Postulate">Identity</a> <a id="1078" class="Symbol">→</a> <a id="1080" href="Agda.Primitive.html#320" class="Primitive">Set</a>

  <a id="use-your-imagination"></a><a id="1087" href="blog/proof-carrying-code/index.html#1087" class="Postulate">use-your-imagination</a> <a id="1108" class="Symbol">:</a> <a id="1110" class="Symbol">{</a><a id="1111" href="blog/proof-carrying-code/index.html#1111" class="Bound">A</a> <a id="1113" class="Symbol">:</a> <a id="1115" href="Agda.Primitive.html#320" class="Primitive">Set</a><a id="1118" class="Symbol">}</a> <a id="1120" class="Symbol">→</a> <a id="1122" href="blog/proof-carrying-code/index.html#1111" class="Bound">A</a>

<a id="1125" class="Keyword">record</a> <a id="SignedMessage"></a><a id="1132" href="blog/proof-carrying-code/index.html#1132" class="Record">SignedMessage</a> <a id="1146" class="Symbol">{</a><a id="1147" href="blog/proof-carrying-code/index.html#1147" class="Bound">n</a> <a id="1149" class="Symbol">:</a> <a id="1151" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a><a id="1152" class="Symbol">}</a> <a id="1154" class="Symbol">(</a><a id="1155" href="blog/proof-carrying-code/index.html#1155" class="Bound">pool</a> <a id="1160" class="Symbol">:</a> <a id="1162" href="Data.Vec.Base.html#1007" class="Datatype">Vec</a> <a id="1166" href="blog/proof-carrying-code/index.html#1015" class="Postulate">Identity</a> <a id="1175" href="blog/proof-carrying-code/index.html#1147" class="Bound">n</a><a id="1176" class="Symbol">)</a> <a id="1178" class="Symbol">:</a> <a id="1180" href="Agda.Primitive.html#320" class="Primitive">Set</a> <a id="1184" class="Keyword">where</a>
  <a id="1192" class="Keyword">field</a>
    <a id="SignedMessage.message"></a><a id="1202" href="blog/proof-carrying-code/index.html#1202" class="Field">message</a> <a id="1210" class="Symbol">:</a> <a id="1212" href="blog/proof-carrying-code/index.html#1032" class="Postulate">Message</a>
    <a id="1224" class="Symbol">@</a><a id="1225" class="Symbol">erased</a>
      <a id="SignedMessage.signer"></a><a id="1238" href="blog/proof-carrying-code/index.html#1238" class="Field">signer</a> <a id="1245" class="Symbol">:</a> <a id="1247" href="Data.Fin.Base.html#1135" class="Datatype">Fin</a> <a id="1251" href="blog/proof-carrying-code/index.html#1147" class="Bound">n</a>
    <a id="SignedMessage.signature"></a><a id="1257" href="blog/proof-carrying-code/index.html#1257" class="Field">signature</a> <a id="1267" class="Symbol">:</a> <a id="1269" href="blog/proof-carrying-code/index.html#1048" class="Postulate">SignedBy</a> <a id="1278" href="blog/proof-carrying-code/index.html#1202" class="Field">message</a> <a id="1286" class="Symbol">(</a><a id="1287" href="Data.Vec.Base.html#1614" class="Function">lookup</a> <a id="1294" href="blog/proof-carrying-code/index.html#1155" class="Bound">pool</a> <a id="1299" href="blog/proof-carrying-code/index.html#1238" class="Field">signer</a><a id="1305" class="Symbol">)</a>
</pre>
<p>where <code>@erased</code> is Agda’s <a href="https://agda.readthedocs.io/en/v2.6.2.1/language/runtime-irrelevance.html#runtime-irrelevance">runtime irrelevance</a> annotation, meaning the <span class="Agda"><a href="blog/proof-carrying-code/index.html#1238" class="Field">signer</a></span> field won’t exist at runtime. In fact, attempting to write a function that would extract it results in the following error:</p>
<blockquote>
<p>Identifier <code>signer</code> is declared erased, so it cannot be used here<br />
when checking that the expression <code>signer x</code> has type <code>Fin n</code></p>
</blockquote>
<p>Nice one Agda!</p>
<p>Hand-compiling this thing is thus constructing some object that has the desired properties, but doing it in a way that requires BEING VERY SMART, and throwing away any chance at composability in the process. For example, it’d be nice to have the following:</p>
<pre class="Agda"><a id="2045" class="Keyword">open</a> <a id="2050" href="blog/proof-carrying-code/index.html#1132" class="Module">SignedMessage</a>

<a id="weakenL"></a><a id="2065" href="blog/proof-carrying-code/index.html#2065" class="Function">weakenL</a> <a id="2073" class="Symbol">:</a> <a id="2075" class="Symbol">∀</a> <a id="2077" class="Symbol">{</a><a id="2078" href="blog/proof-carrying-code/index.html#2078" class="Bound">n</a> <a id="2080" href="blog/proof-carrying-code/index.html#2080" class="Bound">pool</a> <a id="2085" href="blog/proof-carrying-code/index.html#2085" class="Bound">new-id</a><a id="2091" class="Symbol">}</a>
        <a id="2101" class="Symbol">→</a> <a id="2103" href="blog/proof-carrying-code/index.html#1132" class="Record">SignedMessage</a> <a id="2117" class="Symbol">{</a><a id="2118" href="blog/proof-carrying-code/index.html#2078" class="Bound">n</a><a id="2119" class="Symbol">}</a> <a id="2121" href="blog/proof-carrying-code/index.html#2080" class="Bound">pool</a>
        <a id="2134" class="Symbol">→</a> <a id="2136" href="blog/proof-carrying-code/index.html#1132" class="Record">SignedMessage</a> <a id="2150" class="Symbol">(</a><a id="2151" href="blog/proof-carrying-code/index.html#2085" class="Bound">new-id</a> <a id="2158" href="Data.Vec.Base.html#1062" class="InductiveConstructor Operator">∷</a> <a id="2160" href="blog/proof-carrying-code/index.html#2080" class="Bound">pool</a><a id="2164" class="Symbol">)</a>
<a id="2166" href="blog/proof-carrying-code/index.html#2065" class="Function">weakenL</a> <a id="2174" href="blog/proof-carrying-code/index.html#2174" class="Bound">x</a> <a id="2176" class="Symbol">=</a> <a id="2178" href="blog/proof-carrying-code/index.html#1087" class="Postulate">use-your-imagination</a>

<a id="weakenR"></a><a id="2200" href="blog/proof-carrying-code/index.html#2200" class="Function">weakenR</a> <a id="2208" class="Symbol">:</a> <a id="2210" class="Symbol">∀</a> <a id="2212" class="Symbol">{</a><a id="2213" href="blog/proof-carrying-code/index.html#2213" class="Bound">n</a> <a id="2215" href="blog/proof-carrying-code/index.html#2215" class="Bound">pool</a> <a id="2220" href="blog/proof-carrying-code/index.html#2220" class="Bound">new-id</a><a id="2226" class="Symbol">}</a>
        <a id="2236" class="Symbol">→</a> <a id="2238" href="blog/proof-carrying-code/index.html#1132" class="Record">SignedMessage</a> <a id="2252" class="Symbol">{</a><a id="2253" href="blog/proof-carrying-code/index.html#2213" class="Bound">n</a><a id="2254" class="Symbol">}</a> <a id="2256" href="blog/proof-carrying-code/index.html#2215" class="Bound">pool</a>
        <a id="2269" class="Symbol">→</a> <a id="2271" href="blog/proof-carrying-code/index.html#1132" class="Record">SignedMessage</a> <a id="2285" class="Symbol">(</a><a id="2286" href="blog/proof-carrying-code/index.html#2215" class="Bound">pool</a> <a id="2291" href="Data.Vec.Base.html#2718" class="Function Operator">++</a> <a id="2294" href="Data.Vec.Base.html#5759" class="Function Operator">[</a> <a id="2296" href="blog/proof-carrying-code/index.html#2220" class="Bound">new-id</a> <a id="2303" href="Data.Vec.Base.html#5759" class="Function Operator">]</a><a id="2304" class="Symbol">)</a>
<a id="2306" href="blog/proof-carrying-code/index.html#2200" class="Function">weakenR</a> <a id="2314" href="blog/proof-carrying-code/index.html#2314" class="Bound">x</a> <a id="2316" class="Symbol">=</a> <a id="2318" href="blog/proof-carrying-code/index.html#1087" class="Postulate">use-your-imagination</a>
</pre>
<p>which would allow us to arbitrarily extend the pool of a signed message. Then, we could trivially construct one:</p>
<pre class="Agda"><a id="sign"></a><a id="2462" href="blog/proof-carrying-code/index.html#2462" class="Function">sign</a> <a id="2467" class="Symbol">:</a> <a id="2469" href="blog/proof-carrying-code/index.html#1032" class="Postulate">Message</a> <a id="2477" class="Symbol">→</a> <a id="2479" class="Symbol">(</a><a id="2480" href="blog/proof-carrying-code/index.html#2480" class="Bound">who</a> <a id="2484" class="Symbol">:</a> <a id="2486" href="blog/proof-carrying-code/index.html#1015" class="Postulate">Identity</a><a id="2494" class="Symbol">)</a> <a id="2496" class="Symbol">→</a> <a id="2498" href="blog/proof-carrying-code/index.html#1132" class="Record">SignedMessage</a> <a id="2512" href="Data.Vec.Base.html#5759" class="Function Operator">[</a> <a id="2514" href="blog/proof-carrying-code/index.html#2480" class="Bound">who</a> <a id="2518" href="Data.Vec.Base.html#5759" class="Function Operator">]</a>
<a id="2520" href="blog/proof-carrying-code/index.html#1202" class="Field">message</a>   <a id="2530" class="Symbol">(</a><a id="2531" href="blog/proof-carrying-code/index.html#2462" class="Function">sign</a> <a id="2536" href="blog/proof-carrying-code/index.html#2536" class="Bound">msg</a> <a id="2540" href="blog/proof-carrying-code/index.html#2540" class="Bound">who</a><a id="2543" class="Symbol">)</a> <a id="2545" class="Symbol">=</a> <a id="2547" href="blog/proof-carrying-code/index.html#2536" class="Bound">msg</a>
<a id="2551" href="blog/proof-carrying-code/index.html#1238" class="Field">signer</a>    <a id="2561" class="Symbol">(</a><a id="2562" href="blog/proof-carrying-code/index.html#2462" class="Function">sign</a> <a id="2567" href="blog/proof-carrying-code/index.html#2567" class="Bound">msg</a> <a id="2571" href="blog/proof-carrying-code/index.html#2571" class="Bound">who</a><a id="2574" class="Symbol">)</a> <a id="2576" class="Symbol">=</a> <a id="2578" href="Data.Fin.Base.html#1157" class="InductiveConstructor">zero</a>
<a id="2583" href="blog/proof-carrying-code/index.html#1257" class="Field">signature</a> <a id="2593" class="Symbol">(</a><a id="2594" href="blog/proof-carrying-code/index.html#2462" class="Function">sign</a> <a id="2599" href="blog/proof-carrying-code/index.html#2599" class="Bound">msg</a> <a id="2603" href="blog/proof-carrying-code/index.html#2603" class="Bound">who</a><a id="2606" class="Symbol">)</a> <a id="2608" class="Symbol">=</a> <a id="2610" href="blog/proof-carrying-code/index.html#1087" class="Postulate">use-your-imagination</a>
</pre>
<p>and then obfuscate who signed by some random choice of subsequent <span class="Agda"><a href="blog/proof-carrying-code/index.html#2065" class="Function">weakenL</a></span>s and <span class="Agda"><a href="blog/proof-carrying-code/index.html#2200" class="Function">weakenR</a></span>s.</p>
<p>Unfortunately, this is not the case with ring signatures. Ring signatures require you to “bake in” the signing pool when you construct your signature, and you can never again change that pool, short of doing all the work again. This behavior is non-composable, and thus, in my reckoning, unlikely to be a true solution to the problem.</p>
<p>The paper I chose to review this week is <a href="https://www.cs.jhu.edu/~fabian/courses/CS600.624/proof-carrying-code.pdf">Proof-Carrying Code</a> by George Necula, in an attempt to understand if the PL literature has anything to say about this problem.</p>
<p>PCC is an old paper (from 1997, egads!) but it was the first thing I found on the subject. I should really get better at vetting my literature before I go through the effort of going through it, but hey, what are you going to do?</p>
<p>The idea behind PCC is that we want to execute some untrusted machine code. But we don’t want to sacrifice our system security to do it. And we don’t want to evaluate some safe language into machine code, because that would be too slow. Instead, we’ll send the machine code, as well as a safety proof that verifies it’s safe to execute this code. The safety proof is tied to the machine code, such that you can’t just generate a safety proof for an unrelated problem, and then attach it to some malicious code. But the safety proof isn’t obfuscated or anything; the claim is that if you can construct a safety proof for a given program, that program is necessarily safe to run.</p>
<p>On the runtime side, there is a simple algorithm for checking the safety proof, and it is independent of the arguments that the program is run with; therefore, we can get away with checking code once and evaluating it many times. It’s important that the algorithm be simple, because it’s a necessarily trusted piece of code, and it would be bad news if it were to have bugs.</p>
<p>PCC’s approach is a bit… unimaginative. For every opcode we’d like to allow in the programs, we attach a safety precondition, and a postcondition. Then, we map the vector of opcodes we’d like to run into its pre/post conditions, and make sure they are confluent. If they are, we’re good to go. This vector of conditions is called the vector VC in the paper.</p>
<p>So, the compiler computes the VC and attaches it to the code. Think of the VC as a proposition of safety (that is, a type), and a proof of that proposition (the VC itself.) In order to validate this, the runtime does a safety typecheck, figuring out what the proposition of safety would have to be. It compares this against the attached proof, and if they match, it typechecks the VC to ensure it has the type it says. If it does, our code is safe.</p>
<p>The PCC paper is a bit light on details here, so it’s worth thinking about exactly what’s going on here. Presumably determining the safety preconditions is an easy problem if we can do it at runtime, but proving some code satisfies it is hard, <em>or else we could just do that at runtime too.</em></p>
<p>I’m a bit hesitant to dive into the details here, because I don’t really care about determining whether some blob of machine code is safe to run. It’s a big ball of poorly typed typing judgments about memory usage. Why do I say poorly typed? Well consider one of the rules from the paper:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi>m</mi><mo>⊢</mo><mi>e</mi><mo>:</mo><mi>τ</mi><mtext>list</mtext><mspace width="1em"></mspace><mspace width="1em"></mspace><mi>e</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><mrow><mi>m</mi><mo>⊢</mo><mi>e</mi><mo>:</mo><mtext>addr</mtext><mo>∧</mo><mo>…</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">
\frac{m \vdash e : \tau \text{list} \quad \quad e \neq 0}
     {m \vdash e : \text{addr} \wedge \ldots}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊢</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord">addr</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">…</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊢</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mord text"><span class="mord">list</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>Here we have that from <code>e : List τ</code> (and that <code>e</code> isn’t 0) we can derive <code>e : addr</code>. At best, if we are charitable in assuming <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">e \neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> means that <code>e</code> isn’t <code>nil</code>, there is a type preservation error here. If we are less charitable, there is also some awful type error here involving 0, which might be a null check or something? This seems sufficiently messy that I don’t care enough to decipher it.</p>
<p>How applicable is any of this to our original question around ring signatures? Not very, I think, unfortunately. We already have the ring signature math if we’d like to encode a proof, and the verification of it is easy enough. But it’s still not very composable, and I doubt this paper will add much there. Some more promising approaches would be to draw the mystery commutative diagrams ala <a href="/blog/adders-and-arrows">Adders and Arrows</a>, starting from a specification and deriving a chain of proofs that the eventual implementation satisfies the specification. The value there is in all the intermediary nodes of the commutative diagram, and whether we can prove weakening lemmas there.</p>
<p>But PCC isn’t entirely a loss; I learned about <code>@erased</code> in Agda.</p>
      ]]></content:encoded>
  </item>
  <item>
      <title>Review: Syntax-Guided Synthesis</title>
      <author>sandy@sandymaguire.me (Sandy Maguire)</author>
      <link>https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html</link>
      <guid>https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html</guid>
      <pubDate>2022-03-19</pubDate>
      <content:encoded><![CDATA[
        <!--
<pre class="Agda"><a id="153" class="Keyword">module</a> <a id="160" href="blog.syntax-guided-synthesis.html" class="Module">blog.syntax-guided-synthesis</a> <a id="189" class="Keyword">where</a>

<a id="196" class="Keyword">open</a> <a id="201" class="Keyword">import</a> <a id="208" href="Data.Nat.html" class="Module">Data.Nat</a>
<a id="217" class="Keyword">open</a> <a id="222" class="Keyword">import</a> <a id="229" href="Data.Nat.Properties.html" class="Module">Data.Nat.Properties</a>
<a id="249" class="Keyword">open</a> <a id="254" class="Keyword">import</a> <a id="261" href="Data.Product.html" class="Module">Data.Product</a>
<a id="274" class="Keyword">open</a> <a id="279" class="Keyword">import</a> <a id="286" href="Data.Sum.html" class="Module">Data.Sum</a>
<a id="295" class="Keyword">open</a> <a id="300" class="Keyword">import</a> <a id="307" href="Relation.Binary.PropositionalEquality.html" class="Module">Relation.Binary.PropositionalEquality</a>
<a id="345" class="Keyword">open</a> <a id="350" class="Keyword">import</a> <a id="357" href="Relation.Nullary.html" class="Module">Relation.Nullary</a> <a id="374" class="Keyword">using</a> <a id="380" class="Symbol">(</a><a id="381" href="Relation.Nullary.html#1520" class="Record">Dec</a><a id="384" class="Symbol">;</a> <a id="386" href="Relation.Nullary.html#1657" class="InductiveConstructor">yes</a><a id="389" class="Symbol">;</a> <a id="391" href="Relation.Nullary.html#1694" class="InductiveConstructor">no</a><a id="393" class="Symbol">;</a> <a id="395" href="Relation.Nullary.html#1568" class="InductiveConstructor Operator">_because_</a><a id="404" class="Symbol">;</a> <a id="406" href="Relation.Nullary.html#665" class="Function Operator">¬_</a><a id="408" class="Symbol">;</a> <a id="410" href="Relation.Nullary.html#911" class="InductiveConstructor">ofʸ</a><a id="413" class="Symbol">;</a> <a id="415" href="Relation.Nullary.html#948" class="InductiveConstructor">ofⁿ</a><a id="418" class="Symbol">)</a>
<a id="420" class="Keyword">open</a> <a id="425" class="Keyword">import</a> <a id="432" href="Data.Bool.html" class="Module">Data.Bool</a> <a id="442" class="Keyword">hiding</a> <a id="449" class="Symbol">(</a><a id="450" href="Data.Bool.Properties.html#1135" class="Function Operator">_≟_</a><a id="453" class="Symbol">;</a> <a id="455" href="Data.Bool.Base.html#681" class="Datatype Operator">_≤_</a><a id="458" class="Symbol">;</a> <a id="460" href="Data.Bool.Properties.html#1973" class="Function Operator">_≤?_</a><a id="464" class="Symbol">)</a>
<a id="466" class="Keyword">open</a> <a id="471" class="Keyword">import</a> <a id="478" href="Relation.Nullary.Negation.html" class="Module">Relation.Nullary.Negation</a>
<a id="504" class="Keyword">open</a> <a id="509" class="Keyword">import</a> <a id="516" href="Data.List.html" class="Module">Data.List</a> <a id="526" class="Keyword">hiding</a> <a id="533" class="Symbol">(</a><a id="534" href="Data.List.Base.html#4597" class="Function">and</a><a id="537" class="Symbol">;</a> <a id="539" href="Data.List.Base.html#5034" class="Function Operator">[_]</a><a id="542" class="Symbol">)</a>
<a id="544" class="Keyword">open</a> <a id="549" class="Keyword">import</a> <a id="556" href="Function.html" class="Module">Function</a> <a id="565" class="Keyword">hiding</a> <a id="572" class="Symbol">(</a><a id="573" href="Function.Base.html#645" class="Function">const</a><a id="578" class="Symbol">)</a>
<a id="580" class="Keyword">open</a> <a id="585" class="Keyword">import</a> <a id="592" href="Data.Maybe.html" class="Module">Data.Maybe</a>
</pre>-->
<p>I was describing my idea from <a href="/blog/generic-parallel-fp">last week</a> to <a href="/blog/generic-parallel-fp/#future-work">automatically optimize programs</a> to Colin, who pointed me towards <a href="https://sygus.org/assets/pdf/Journal_SyGuS.pdf">Syntax-Guided Synthesis</a> by Alur et al.</p>
<p>Syntax-Guided Synthesis is the idea that free-range program synthesis is really hard, so instead, let’s constrain the search space with a grammar of allowable programs. We can then enumerate those possible programs, attempting to find one that satisfies some constraints. The idea is quite straightforward when you see it, but that’s not to say it’s unimpressive; the paper has lots of quantitative results about exactly how well this approach does.</p>
<p>The idea is we want to find programs with type <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a></span> <code>→</code> <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5703" class="Bound">O</a></span>, that satisfy some <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a></span>ification. We’ll do that by picking some <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a></span>uage of syntax, and trying to build our programs there.</p>
<p>All of this is sorta moot, because we assume we have some <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#6743" class="Bound">oracle</a></span> which can tell us if our program satisfies the <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a></span>. But the <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#6743" class="Bound">oracle</a></span> is probably some SMT solver, and is thus expensive to call, so we’d like to try hard not to call it if possible.</p>
<p>Let’s take an example, and say that we’d like to synthesize the <code>max</code> of two <code class="sourceCode agda">Nat</code>s. There are lots of ways of doing that! But we’d like to find a function that satisfies the following:</p>
<pre class="Agda"><a id="2068" class="Keyword">data</a> <a id="MaxSpec"></a><a id="2073" href="blog/syntax-guided-synthesis/index.html#2073" class="Datatype">MaxSpec</a> <a id="2081" class="Symbol">(</a><a id="2082" href="blog/syntax-guided-synthesis/index.html#2082" class="Bound">f</a> <a id="2084" class="Symbol">:</a> <a id="2086" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="2088" href="Data.Product.html#1176" class="Function Operator">×</a> <a id="2090" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="2092" class="Symbol">→</a> <a id="2094" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a><a id="2095" class="Symbol">)</a> <a id="2097" class="Symbol">:</a> <a id="2099" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="2101" href="Data.Product.html#1176" class="Function Operator">×</a> <a id="2103" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="2105" class="Symbol">→</a> <a id="2107" href="Agda.Primitive.html#320" class="Primitive">Set</a> <a id="2111" class="Keyword">where</a>
  <a id="MaxSpec.is-max"></a><a id="2119" href="blog/syntax-guided-synthesis/index.html#2119" class="InductiveConstructor">is-max</a> <a id="2126" class="Symbol">:</a> <a id="2128" class="Symbol">{</a><a id="2129" href="blog/syntax-guided-synthesis/index.html#2129" class="Bound">x</a> <a id="2131" href="blog/syntax-guided-synthesis/index.html#2131" class="Bound">y</a> <a id="2133" class="Symbol">:</a> <a id="2135" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a><a id="2136" class="Symbol">}</a>
         <a id="2147" class="Symbol">→</a> <a id="2149" href="blog/syntax-guided-synthesis/index.html#2129" class="Bound">x</a> <a id="2151" href="Data.Nat.Base.html#1544" class="Datatype Operator">≤</a> <a id="2153" href="blog/syntax-guided-synthesis/index.html#2082" class="Bound">f</a> <a id="2155" class="Symbol">(</a><a id="2156" href="blog/syntax-guided-synthesis/index.html#2129" class="Bound">x</a> <a id="2158" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="2160" href="blog/syntax-guided-synthesis/index.html#2131" class="Bound">y</a><a id="2161" class="Symbol">)</a>
         <a id="2172" class="Symbol">→</a> <a id="2174" href="blog/syntax-guided-synthesis/index.html#2131" class="Bound">y</a> <a id="2176" href="Data.Nat.Base.html#1544" class="Datatype Operator">≤</a> <a id="2178" href="blog/syntax-guided-synthesis/index.html#2082" class="Bound">f</a> <a id="2180" class="Symbol">(</a><a id="2181" href="blog/syntax-guided-synthesis/index.html#2129" class="Bound">x</a> <a id="2183" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="2185" href="blog/syntax-guided-synthesis/index.html#2131" class="Bound">y</a><a id="2186" class="Symbol">)</a>
         <a id="2197" class="Symbol">→</a> <a id="2199" class="Symbol">((</a><a id="2201" href="blog/syntax-guided-synthesis/index.html#2082" class="Bound">f</a> <a id="2203" class="Symbol">(</a><a id="2204" href="blog/syntax-guided-synthesis/index.html#2129" class="Bound">x</a> <a id="2206" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="2208" href="blog/syntax-guided-synthesis/index.html#2131" class="Bound">y</a><a id="2209" class="Symbol">)</a> <a id="2211" href="Agda.Builtin.Equality.html#133" class="Datatype Operator">≡</a> <a id="2213" href="blog/syntax-guided-synthesis/index.html#2129" class="Bound">x</a><a id="2214" class="Symbol">)</a> <a id="2216" href="Data.Sum.Base.html#743" class="Datatype Operator">⊎</a> <a id="2218" class="Symbol">(</a><a id="2219" href="blog/syntax-guided-synthesis/index.html#2082" class="Bound">f</a> <a id="2221" class="Symbol">(</a><a id="2222" href="blog/syntax-guided-synthesis/index.html#2129" class="Bound">x</a> <a id="2224" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="2226" href="blog/syntax-guided-synthesis/index.html#2131" class="Bound">y</a><a id="2227" class="Symbol">)</a> <a id="2229" href="Agda.Builtin.Equality.html#133" class="Datatype Operator">≡</a> <a id="2231" href="blog/syntax-guided-synthesis/index.html#2131" class="Bound">y</a><a id="2232" class="Symbol">))</a>
         <a id="2244" class="Symbol">→</a> <a id="2246" href="blog/syntax-guided-synthesis/index.html#2073" class="Datatype">MaxSpec</a> <a id="2254" href="blog/syntax-guided-synthesis/index.html#2082" class="Bound">f</a> <a id="2256" class="Symbol">(</a><a id="2257" href="blog/syntax-guided-synthesis/index.html#2129" class="Bound">x</a> <a id="2259" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="2261" href="blog/syntax-guided-synthesis/index.html#2131" class="Bound">y</a><a id="2262" class="Symbol">)</a>
</pre>
<p>If we can successfully produce an element of <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#2073" class="Datatype">MaxSpec</a></span> <code>f</code>, we have a proof that <code>f</code> is an implementation of <code>max</code>. Of course, actually producing such a thing is rather tricky; it’s equivalent to determining if <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#2073" class="Datatype">MaxSpec</a></span> <code>f</code> is <span class="Agda"><a href="Relation.Nullary.html#1520" class="Record">Dec</a></span>idable for the given input.</p>
<p>In the first three cases, we have some conflicting piece of information, so we are unable to produce a <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#2073" class="Datatype">MaxSpec</a></span>:</p>
<pre class="Agda"><a id="decideMax"></a><a id="2679" href="blog/syntax-guided-synthesis/index.html#2679" class="Function">decideMax</a> <a id="2689" class="Symbol">:</a> <a id="2691" class="Symbol">(</a><a id="2692" href="blog/syntax-guided-synthesis/index.html#2692" class="Bound">f</a> <a id="2694" class="Symbol">:</a> <a id="2696" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="2698" href="Data.Product.html#1176" class="Function Operator">×</a> <a id="2700" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="2702" class="Symbol">→</a> <a id="2704" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a><a id="2705" class="Symbol">)</a> <a id="2707" class="Symbol">→</a> <a id="2709" class="Symbol">(</a><a id="2710" href="blog/syntax-guided-synthesis/index.html#2710" class="Bound">i</a> <a id="2712" class="Symbol">:</a> <a id="2714" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="2716" href="Data.Product.html#1176" class="Function Operator">×</a> <a id="2718" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a><a id="2719" class="Symbol">)</a> <a id="2721" class="Symbol">→</a> <a id="2723" href="Relation.Nullary.html#1520" class="Record">Dec</a> <a id="2727" class="Symbol">(</a><a id="2728" href="blog/syntax-guided-synthesis/index.html#2073" class="Datatype">MaxSpec</a> <a id="2736" href="blog/syntax-guided-synthesis/index.html#2692" class="Bound">f</a> <a id="2738" href="blog/syntax-guided-synthesis/index.html#2710" class="Bound">i</a><a id="2739" class="Symbol">)</a>
<a id="2741" href="blog/syntax-guided-synthesis/index.html#2679" class="Function">decideMax</a> <a id="2751" href="blog/syntax-guided-synthesis/index.html#2751" class="Bound">f</a> <a id="2753" href="blog/syntax-guided-synthesis/index.html#2753" class="Bound">i</a><a id="2754" class="Symbol">@(</a><a id="2756" href="blog/syntax-guided-synthesis/index.html#2756" class="Bound">x</a> <a id="2758" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="2760" href="blog/syntax-guided-synthesis/index.html#2760" class="Bound">y</a><a id="2761" class="Symbol">)</a> <a id="2763" class="Keyword">with</a> <a id="2768" href="blog/syntax-guided-synthesis/index.html#2751" class="Bound">f</a> <a id="2770" href="blog/syntax-guided-synthesis/index.html#2753" class="Bound">i</a> <a id="2772" class="Symbol">|</a> <a id="2774" href="Relation.Binary.PropositionalEquality.html#2391" class="Function">inspect</a> <a id="2782" href="blog/syntax-guided-synthesis/index.html#2751" class="Bound">f</a> <a id="2784" href="blog/syntax-guided-synthesis/index.html#2753" class="Bound">i</a>
<a id="2786" class="Symbol">...</a> <a id="2790" class="Symbol">|</a> <a id="2792" href="blog/syntax-guided-synthesis/index.html#2792" class="Bound">o</a> <a id="2794" class="Symbol">|</a> <a id="2796" href="Relation.Binary.PropositionalEquality.html#2365" class="InductiveConstructor Operator">[</a> <a id="2798" href="blog/syntax-guided-synthesis/index.html#2798" class="Bound">fi≡o</a> <a id="2803" href="Relation.Binary.PropositionalEquality.html#2365" class="InductiveConstructor Operator">]</a> <a id="2805" class="Keyword">with</a> <a id="2810" class="Bound">x</a> <a id="2812" href="Data.Nat.Properties.html#5527" class="Function Operator">≤?</a> <a id="2815" href="blog/syntax-guided-synthesis/index.html#2792" class="Bound">o</a> <a id="2817" class="Symbol">|</a> <a id="2819" class="Bound">y</a> <a id="2821" href="Data.Nat.Properties.html#5527" class="Function Operator">≤?</a> <a id="2824" href="blog/syntax-guided-synthesis/index.html#2792" class="Bound">o</a>
<a id="2826" class="Symbol">...</a> <a id="2830" class="Symbol">|</a> <a id="2832" href="Relation.Nullary.html#1694" class="InductiveConstructor">no</a> <a id="2835" href="blog/syntax-guided-synthesis/index.html#2835" class="Bound">¬x≤o</a> <a id="2840" class="Symbol">|</a> <a id="2842" class="Symbol">_</a> <a id="2844" class="Symbol">=</a> <a id="2846" href="Relation.Nullary.html#1694" class="InductiveConstructor">no</a> <a id="2849" class="Symbol">λ</a> <a id="2851" class="Symbol">{</a> <a id="2853" class="Symbol">(</a><a id="2854" href="blog/syntax-guided-synthesis/index.html#2119" class="InductiveConstructor">is-max</a> <a id="2861" href="blog/syntax-guided-synthesis/index.html#2861" class="Bound">x≤o</a> <a id="2865" class="Symbol">_</a> <a id="2867" class="Symbol">_)</a> <a id="2870" class="Symbol">→</a>
        <a id="2880" href="Relation.Nullary.Negation.Core.html#787" class="Function">contradiction</a> <a id="2894" class="Symbol">(</a><a id="2895" href="Data.Nat.Properties.html#4757" class="Function">≤-trans</a> <a id="2903" href="blog/syntax-guided-synthesis/index.html#2861" class="Bound">x≤o</a> <a id="2907" class="Symbol">(</a><a id="2908" href="Data.Nat.Properties.html#4468" class="Function">≤-reflexive</a> <a id="2920" class="Bound">fi≡o</a><a id="2924" class="Symbol">))</a> <a id="2927" href="blog/syntax-guided-synthesis/index.html#2835" class="Bound">¬x≤o</a> <a id="2932" class="Symbol">}</a>
<a id="2934" class="Symbol">...</a> <a id="2938" class="Symbol">|</a> <a id="2940" href="Relation.Nullary.html#1657" class="InductiveConstructor">yes</a> <a id="2944" class="Symbol">_</a> <a id="2946" class="Symbol">|</a> <a id="2948" href="Relation.Nullary.html#1694" class="InductiveConstructor">no</a> <a id="2951" href="blog/syntax-guided-synthesis/index.html#2951" class="Bound">¬y≤o</a> <a id="2956" class="Symbol">=</a> <a id="2958" href="Relation.Nullary.html#1694" class="InductiveConstructor">no</a> <a id="2961" class="Symbol">λ</a> <a id="2963" class="Symbol">{</a> <a id="2965" class="Symbol">(</a><a id="2966" href="blog/syntax-guided-synthesis/index.html#2119" class="InductiveConstructor">is-max</a> <a id="2973" href="blog/syntax-guided-synthesis/index.html#2973" class="Bound">x</a> <a id="2975" href="blog/syntax-guided-synthesis/index.html#2975" class="Bound">y≤o</a> <a id="2979" href="blog/syntax-guided-synthesis/index.html#2979" class="Bound">x₂</a><a id="2981" class="Symbol">)</a> <a id="2983" class="Symbol">→</a>
        <a id="2993" href="Relation.Nullary.Negation.Core.html#787" class="Function">contradiction</a> <a id="3007" class="Symbol">(</a><a id="3008" href="Data.Nat.Properties.html#4757" class="Function">≤-trans</a> <a id="3016" href="blog/syntax-guided-synthesis/index.html#2975" class="Bound">y≤o</a> <a id="3020" class="Symbol">(</a><a id="3021" href="Data.Nat.Properties.html#4468" class="Function">≤-reflexive</a> <a id="3033" class="Bound">fi≡o</a><a id="3037" class="Symbol">))</a> <a id="3040" href="blog/syntax-guided-synthesis/index.html#2951" class="Bound">¬y≤o</a> <a id="3045" class="Symbol">}</a>
<a id="3047" class="Symbol">...</a> <a id="3051" class="Symbol">|</a> <a id="3053" href="Relation.Nullary.html#1657" class="InductiveConstructor">yes</a> <a id="3057" href="blog/syntax-guided-synthesis/index.html#3057" class="Bound">x≤o</a> <a id="3061" class="Symbol">|</a> <a id="3063" href="Relation.Nullary.html#1657" class="InductiveConstructor">yes</a> <a id="3067" href="blog/syntax-guided-synthesis/index.html#3067" class="Bound">y≤o</a> <a id="3071" class="Keyword">with</a> <a id="3076" class="Bound">o</a> <a id="3078" href="Data.Nat.Properties.html#2538" class="Function Operator">≟</a> <a id="3080" class="Bound">x</a> <a id="3082" class="Symbol">|</a> <a id="3084" class="Bound">o</a> <a id="3086" href="Data.Nat.Properties.html#2538" class="Function Operator">≟</a> <a id="3088" class="Bound">y</a>
<a id="3090" class="Symbol">...</a> <a id="3094" class="Symbol">|</a> <a id="3096" href="Relation.Nullary.html#1694" class="InductiveConstructor">no</a> <a id="3099" href="blog/syntax-guided-synthesis/index.html#3099" class="Bound">x≠o</a> <a id="3103" class="Symbol">|</a> <a id="3105" href="Relation.Nullary.html#1694" class="InductiveConstructor">no</a> <a id="3108" href="blog/syntax-guided-synthesis/index.html#3108" class="Bound">y≠o</a> <a id="3112" class="Symbol">=</a>
        <a id="3122" href="Relation.Nullary.html#1694" class="InductiveConstructor">no</a> <a id="3125" class="Symbol">λ</a> <a id="3127" class="Symbol">{</a> <a id="3129" class="Symbol">(</a><a id="3130" href="blog/syntax-guided-synthesis/index.html#2119" class="InductiveConstructor">is-max</a> <a id="3137" href="blog/syntax-guided-synthesis/index.html#3137" class="Bound">x</a> <a id="3139" href="blog/syntax-guided-synthesis/index.html#3139" class="Bound">x₁</a> <a id="3142" class="Symbol">(</a><a id="3143" href="Data.Sum.Base.html#793" class="InductiveConstructor">inj₁</a> <a id="3148" href="blog/syntax-guided-synthesis/index.html#3148" class="Bound">x₂</a><a id="3150" class="Symbol">))</a> <a id="3153" class="Symbol">→</a>
                  <a id="3173" href="Relation.Nullary.Negation.Core.html#787" class="Function">contradiction</a> <a id="3187" class="Symbol">(</a><a id="3188" href="Relation.Binary.PropositionalEquality.Core.html#1738" class="Function">trans</a> <a id="3194" class="Symbol">(</a><a id="3195" href="Relation.Binary.PropositionalEquality.Core.html#1693" class="Function">sym</a> <a id="3199" class="Bound">fi≡o</a><a id="3203" class="Symbol">)</a> <a id="3205" href="blog/syntax-guided-synthesis/index.html#3148" class="Bound">x₂</a><a id="3207" class="Symbol">)</a> <a id="3209" href="blog/syntax-guided-synthesis/index.html#3099" class="Bound">x≠o</a>
             <a id="3226" class="Symbol">;</a> <a id="3228" class="Symbol">(</a><a id="3229" href="blog/syntax-guided-synthesis/index.html#2119" class="InductiveConstructor">is-max</a> <a id="3236" href="blog/syntax-guided-synthesis/index.html#3236" class="Bound">x</a> <a id="3238" href="blog/syntax-guided-synthesis/index.html#3238" class="Bound">x₁</a> <a id="3241" class="Symbol">(</a><a id="3242" href="Data.Sum.Base.html#818" class="InductiveConstructor">inj₂</a> <a id="3247" href="blog/syntax-guided-synthesis/index.html#3247" class="Bound">y</a><a id="3248" class="Symbol">))</a> <a id="3251" class="Symbol">→</a>
                  <a id="3271" href="Relation.Nullary.Negation.Core.html#787" class="Function">contradiction</a> <a id="3285" class="Symbol">(</a><a id="3286" href="Relation.Binary.PropositionalEquality.Core.html#1738" class="Function">trans</a> <a id="3292" class="Symbol">(</a><a id="3293" href="Relation.Binary.PropositionalEquality.Core.html#1693" class="Function">sym</a> <a id="3297" class="Bound">fi≡o</a><a id="3301" class="Symbol">)</a> <a id="3303" href="blog/syntax-guided-synthesis/index.html#3247" class="Bound">y</a><a id="3304" class="Symbol">)</a> <a id="3306" href="blog/syntax-guided-synthesis/index.html#3108" class="Bound">y≠o</a>
             <a id="3323" class="Symbol">}</a>
</pre>
<p>Otherwise, we have a proof that <code>o</code> is equal to either <code>y</code> or <code>x</code>:</p>
<pre class="Agda"><a id="3402" class="Symbol">...</a> <a id="3406" class="Symbol">|</a> <a id="3408" href="Relation.Nullary.html#1694" class="InductiveConstructor">no</a> <a id="3411" href="blog/syntax-guided-synthesis/index.html#3411" class="Bound">proof</a> <a id="3417" class="Symbol">|</a> <a id="3419" href="Relation.Nullary.html#1657" class="InductiveConstructor">yes</a> <a id="3423" href="blog/syntax-guided-synthesis/index.html#3423" class="Bound">o≡y</a> <a id="3427" class="Symbol">=</a> <a id="3429" href="Relation.Nullary.html#1657" class="InductiveConstructor">yes</a>
        <a id="3441" class="Symbol">(</a><a id="3442" href="blog/syntax-guided-synthesis/index.html#2119" class="InductiveConstructor">is-max</a> <a id="3449" class="Symbol">(</a><a id="3450" href="Data.Nat.Properties.html#4757" class="Function">≤-trans</a> <a id="3458" class="Bound">x≤o</a> <a id="3462" class="Symbol">(</a><a id="3463" href="Data.Nat.Properties.html#4468" class="Function">≤-reflexive</a> <a id="3475" class="Symbol">(</a><a id="3476" href="Relation.Binary.PropositionalEquality.Core.html#1693" class="Function">sym</a> <a id="3480" class="Bound">fi≡o</a><a id="3484" class="Symbol">)))</a>
                <a id="3504" class="Symbol">(</a><a id="3505" href="Data.Nat.Properties.html#4757" class="Function">≤-trans</a> <a id="3513" class="Bound">y≤o</a> <a id="3517" class="Symbol">(</a><a id="3518" href="Data.Nat.Properties.html#4468" class="Function">≤-reflexive</a> <a id="3530" class="Symbol">(</a><a id="3531" href="Relation.Binary.PropositionalEquality.Core.html#1693" class="Function">sym</a> <a id="3535" class="Bound">fi≡o</a><a id="3539" class="Symbol">)))</a>
                <a id="3559" class="Symbol">(</a><a id="3560" href="Data.Sum.Base.html#818" class="InductiveConstructor">inj₂</a> <a id="3565" class="Symbol">(</a><a id="3566" href="Relation.Binary.PropositionalEquality.Core.html#1738" class="Function">trans</a> <a id="3572" class="Bound">fi≡o</a> <a id="3577" href="blog/syntax-guided-synthesis/index.html#3423" class="Bound">o≡y</a><a id="3580" class="Symbol">)))</a>
<a id="3584" class="Symbol">...</a> <a id="3588" class="Symbol">|</a> <a id="3590" href="Relation.Nullary.html#1657" class="InductiveConstructor">yes</a> <a id="3594" href="blog/syntax-guided-synthesis/index.html#3594" class="Bound">o≡x</a> <a id="3598" class="Symbol">|</a> <a id="3600" class="Symbol">_</a> <a id="3602" class="Symbol">=</a> <a id="3604" href="Relation.Nullary.html#1657" class="InductiveConstructor">yes</a>
        <a id="3616" class="Symbol">(</a><a id="3617" href="blog/syntax-guided-synthesis/index.html#2119" class="InductiveConstructor">is-max</a> <a id="3624" class="Symbol">(</a><a id="3625" href="Data.Nat.Properties.html#4757" class="Function">≤-trans</a> <a id="3633" class="Bound">x≤o</a> <a id="3637" class="Symbol">(</a><a id="3638" href="Data.Nat.Properties.html#4468" class="Function">≤-reflexive</a> <a id="3650" class="Symbol">(</a><a id="3651" href="Relation.Binary.PropositionalEquality.Core.html#1693" class="Function">sym</a> <a id="3655" class="Bound">fi≡o</a><a id="3659" class="Symbol">)))</a>
                <a id="3679" class="Symbol">(</a><a id="3680" href="Data.Nat.Properties.html#4757" class="Function">≤-trans</a> <a id="3688" class="Bound">y≤o</a> <a id="3692" class="Symbol">(</a><a id="3693" href="Data.Nat.Properties.html#4468" class="Function">≤-reflexive</a> <a id="3705" class="Symbol">(</a><a id="3706" href="Relation.Binary.PropositionalEquality.Core.html#1693" class="Function">sym</a> <a id="3710" class="Bound">fi≡o</a><a id="3714" class="Symbol">)))</a>
                <a id="3734" class="Symbol">(</a><a id="3735" href="Data.Sum.Base.html#793" class="InductiveConstructor">inj₁</a> <a id="3740" class="Symbol">(</a><a id="3741" href="Relation.Binary.PropositionalEquality.Core.html#1738" class="Function">trans</a> <a id="3747" class="Bound">fi≡o</a> <a id="3752" href="blog/syntax-guided-synthesis/index.html#3594" class="Bound">o≡x</a><a id="3755" class="Symbol">)))</a>
</pre>
<p><span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#2073" class="Datatype">MaxSpec</a></span> is a proof that our function is an implementation of <code>max</code>, and <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#2679" class="Function">decideMax</a></span> is a proof that “we’d know one if we saw one.” So that’s the specification taken care of. The next step is to define the syntax we’d like to guard our search.</p>
<p>The paper presents this syntax as a BNF grammar, but my thought is why use a grammar when we could instead use a type system? Our syntax is a tiny little branching calculus, capable of representing <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a></span>s and branching <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a></span>itionals:</p>
<pre class="Agda"><a id="4279" class="Keyword">mutual</a>
  <a id="4288" class="Keyword">data</a> <a id="Term"></a><a id="4293" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a> <a id="4298" class="Symbol">:</a> <a id="4300" href="Agda.Primitive.html#320" class="Primitive">Set</a> <a id="4304" class="Keyword">where</a>
    <a id="Term.var-x"></a><a id="4314" href="blog/syntax-guided-synthesis/index.html#4314" class="InductiveConstructor">var-x</a> <a id="4320" class="Symbol">:</a> <a id="4322" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a>
    <a id="Term.var-y"></a><a id="4331" href="blog/syntax-guided-synthesis/index.html#4331" class="InductiveConstructor">var-y</a> <a id="4337" class="Symbol">:</a> <a id="4339" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a>
    <a id="Term.const"></a><a id="4348" href="blog/syntax-guided-synthesis/index.html#4348" class="InductiveConstructor">const</a> <a id="4354" class="Symbol">:</a> <a id="4356" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="4358" class="Symbol">→</a> <a id="4360" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a>
    <a id="Term.if-then-else"></a><a id="4369" href="blog/syntax-guided-synthesis/index.html#4369" class="InductiveConstructor">if-then-else</a> <a id="4382" class="Symbol">:</a> <a id="4384" href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a> <a id="4389" class="Symbol">→</a> <a id="4391" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a> <a id="4396" class="Symbol">→</a> <a id="4398" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a> <a id="4403" class="Symbol">→</a> <a id="4405" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a>

  <a id="4413" class="Keyword">data</a> <a id="Cond"></a><a id="4418" href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a> <a id="4423" class="Symbol">:</a> <a id="4425" href="Agda.Primitive.html#320" class="Primitive">Set</a> <a id="4429" class="Keyword">where</a>
    <a id="Cond.leq"></a><a id="4439" href="blog/syntax-guided-synthesis/index.html#4439" class="InductiveConstructor">leq</a> <a id="4443" class="Symbol">:</a> <a id="4445" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a> <a id="4450" class="Symbol">→</a> <a id="4452" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a> <a id="4457" class="Symbol">→</a> <a id="4459" href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a>
    <a id="Cond.and"></a><a id="4468" href="blog/syntax-guided-synthesis/index.html#4468" class="InductiveConstructor">and</a> <a id="4472" class="Symbol">:</a> <a id="4474" href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a> <a id="4479" class="Symbol">→</a> <a id="4481" href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a> <a id="4486" class="Symbol">→</a> <a id="4488" href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a>
    <a id="Cond.invert"></a><a id="4497" href="blog/syntax-guided-synthesis/index.html#4497" class="InductiveConstructor">invert</a> <a id="4504" class="Symbol">:</a> <a id="4506" href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a> <a id="4511" class="Symbol">→</a> <a id="4513" href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a>
</pre>
<p>All that’s left for our example is the ability to “compile” a <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a></span> down to a candidate function. Just pattern match on the constructors and push the inputs around until we’re done:</p>
<pre class="Agda"><a id="4719" class="Keyword">mutual</a>
  <a id="eval"></a><a id="4728" href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a> <a id="4733" class="Symbol">:</a> <a id="4735" href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a> <a id="4740" class="Symbol">→</a> <a id="4742" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="4744" href="Data.Product.html#1176" class="Function Operator">×</a> <a id="4746" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="4748" class="Symbol">→</a> <a id="4750" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a>
  <a id="4754" href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a> <a id="4759" href="blog/syntax-guided-synthesis/index.html#4314" class="InductiveConstructor">var-x</a> <a id="4765" class="Symbol">(</a><a id="4766" href="blog/syntax-guided-synthesis/index.html#4766" class="Bound">x</a> <a id="4768" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="4770" href="blog/syntax-guided-synthesis/index.html#4770" class="Bound">y</a><a id="4771" class="Symbol">)</a> <a id="4773" class="Symbol">=</a> <a id="4775" href="blog/syntax-guided-synthesis/index.html#4766" class="Bound">x</a>
  <a id="4779" href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a> <a id="4784" href="blog/syntax-guided-synthesis/index.html#4331" class="InductiveConstructor">var-y</a> <a id="4790" class="Symbol">(</a><a id="4791" href="blog/syntax-guided-synthesis/index.html#4791" class="Bound">x</a> <a id="4793" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="4795" href="blog/syntax-guided-synthesis/index.html#4795" class="Bound">y</a><a id="4796" class="Symbol">)</a> <a id="4798" class="Symbol">=</a> <a id="4800" href="blog/syntax-guided-synthesis/index.html#4795" class="Bound">y</a>
  <a id="4804" href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a> <a id="4809" class="Symbol">(</a><a id="4810" href="blog/syntax-guided-synthesis/index.html#4348" class="InductiveConstructor">const</a> <a id="4816" href="blog/syntax-guided-synthesis/index.html#4816" class="Bound">c</a><a id="4817" class="Symbol">)</a> <a id="4819" class="Symbol">(</a><a id="4820" href="blog/syntax-guided-synthesis/index.html#4820" class="Bound">x</a> <a id="4822" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="4824" href="blog/syntax-guided-synthesis/index.html#4824" class="Bound">y</a><a id="4825" class="Symbol">)</a> <a id="4827" class="Symbol">=</a> <a id="4829" href="blog/syntax-guided-synthesis/index.html#4816" class="Bound">c</a>
  <a id="4833" href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a> <a id="4838" class="Symbol">(</a><a id="4839" href="blog/syntax-guided-synthesis/index.html#4369" class="InductiveConstructor">if-then-else</a> <a id="4852" href="blog/syntax-guided-synthesis/index.html#4852" class="Bound">c</a> <a id="4854" href="blog/syntax-guided-synthesis/index.html#4854" class="Bound">t</a> <a id="4856" href="blog/syntax-guided-synthesis/index.html#4856" class="Bound">f</a><a id="4857" class="Symbol">)</a> <a id="4859" href="blog/syntax-guided-synthesis/index.html#4859" class="Bound">i</a> <a id="4861" class="Symbol">=</a>
    <a id="4867" href="Data.Bool.Base.html#1292" class="Function Operator">if</a> <a id="4870" href="blog/syntax-guided-synthesis/index.html#4914" class="Function">evalCond</a> <a id="4879" href="blog/syntax-guided-synthesis/index.html#4852" class="Bound">c</a> <a id="4881" href="blog/syntax-guided-synthesis/index.html#4859" class="Bound">i</a> <a id="4883" href="Data.Bool.Base.html#1292" class="Function Operator">then</a> <a id="4888" href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a> <a id="4893" href="blog/syntax-guided-synthesis/index.html#4854" class="Bound">t</a> <a id="4895" href="blog/syntax-guided-synthesis/index.html#4859" class="Bound">i</a> <a id="4897" href="Data.Bool.Base.html#1292" class="Function Operator">else</a> <a id="4902" href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a> <a id="4907" href="blog/syntax-guided-synthesis/index.html#4856" class="Bound">f</a> <a id="4909" href="blog/syntax-guided-synthesis/index.html#4859" class="Bound">i</a>

  <a id="evalCond"></a><a id="4914" href="blog/syntax-guided-synthesis/index.html#4914" class="Function">evalCond</a> <a id="4923" class="Symbol">:</a> <a id="4925" href="blog/syntax-guided-synthesis/index.html#4418" class="Datatype">Cond</a> <a id="4930" class="Symbol">→</a> <a id="4932" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="4934" href="Data.Product.html#1176" class="Function Operator">×</a> <a id="4936" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="4938" class="Symbol">→</a> <a id="4940" href="Agda.Builtin.Bool.html#156" class="Datatype">Bool</a>
  <a id="4947" href="blog/syntax-guided-synthesis/index.html#4914" class="Function">evalCond</a> <a id="4956" class="Symbol">(</a><a id="4957" href="blog/syntax-guided-synthesis/index.html#4439" class="InductiveConstructor">leq</a> <a id="4961" href="blog/syntax-guided-synthesis/index.html#4961" class="Bound">m</a> <a id="4963" href="blog/syntax-guided-synthesis/index.html#4963" class="Bound">n</a><a id="4964" class="Symbol">)</a> <a id="4966" href="blog/syntax-guided-synthesis/index.html#4966" class="Bound">i</a>   <a id="4970" class="Symbol">=</a> <a id="4972" href="Relation.Nullary.html#1590" class="Field">Dec.does</a> <a id="4981" class="Symbol">(</a><a id="4982" href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a> <a id="4987" href="blog/syntax-guided-synthesis/index.html#4961" class="Bound">m</a> <a id="4989" href="blog/syntax-guided-synthesis/index.html#4966" class="Bound">i</a> <a id="4991" href="Data.Nat.Properties.html#5527" class="Function Operator">≤?</a> <a id="4994" href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a> <a id="4999" href="blog/syntax-guided-synthesis/index.html#4963" class="Bound">n</a> <a id="5001" href="blog/syntax-guided-synthesis/index.html#4966" class="Bound">i</a><a id="5002" class="Symbol">)</a>
  <a id="5006" href="blog/syntax-guided-synthesis/index.html#4914" class="Function">evalCond</a> <a id="5015" class="Symbol">(</a><a id="5016" href="blog/syntax-guided-synthesis/index.html#4468" class="InductiveConstructor">and</a> <a id="5020" href="blog/syntax-guided-synthesis/index.html#5020" class="Bound">c1</a> <a id="5023" href="blog/syntax-guided-synthesis/index.html#5023" class="Bound">c2</a><a id="5025" class="Symbol">)</a> <a id="5027" href="blog/syntax-guided-synthesis/index.html#5027" class="Bound">i</a> <a id="5029" class="Symbol">=</a> <a id="5031" href="blog/syntax-guided-synthesis/index.html#4914" class="Function">evalCond</a> <a id="5040" href="blog/syntax-guided-synthesis/index.html#5020" class="Bound">c1</a> <a id="5043" href="blog/syntax-guided-synthesis/index.html#5027" class="Bound">i</a> <a id="5045" href="Data.Bool.Base.html#995" class="Function Operator">∧</a> <a id="5047" href="blog/syntax-guided-synthesis/index.html#4914" class="Function">evalCond</a> <a id="5056" href="blog/syntax-guided-synthesis/index.html#5023" class="Bound">c2</a> <a id="5059" href="blog/syntax-guided-synthesis/index.html#5027" class="Bound">i</a>
  <a id="5063" href="blog/syntax-guided-synthesis/index.html#4914" class="Function">evalCond</a> <a id="5072" class="Symbol">(</a><a id="5073" href="blog/syntax-guided-synthesis/index.html#4497" class="InductiveConstructor">invert</a> <a id="5080" href="blog/syntax-guided-synthesis/index.html#5080" class="Bound">c</a><a id="5081" class="Symbol">)</a> <a id="5083" href="blog/syntax-guided-synthesis/index.html#5083" class="Bound">i</a>  <a id="5086" class="Symbol">=</a> <a id="5088" href="Data.Bool.Base.html#941" class="Function">not</a> <a id="5092" class="Symbol">(</a><a id="5093" href="blog/syntax-guided-synthesis/index.html#4914" class="Function">evalCond</a> <a id="5102" href="blog/syntax-guided-synthesis/index.html#5080" class="Bound">c</a> <a id="5104" href="blog/syntax-guided-synthesis/index.html#5083" class="Bound">i</a><a id="5105" class="Symbol">)</a>
</pre>
<p>So that’s most of the idea; we’ve specified what we’re looking for, via <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#2073" class="Datatype">MaxSpec</a></span>, what our syntax is, via <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#4293" class="Datatype">Term</a></span>, and a way of compiling our syntax into functions, via <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#4728" class="Function">eval</a></span>. This is the gist of the technique; the rest is just algorithms.</p>
<p>The paper presents several algorithms and evaluates their performances. But one is clearly better than the others in the included benchmarks, so we’ll just go through that one.</p>
<p>Our algorithm to synthesize code corresponding to the specification takes a few parameters. We’ve seen the first few:</p>
<pre class="Agda"><a id="5677" class="Keyword">module</a> <a id="Solver"></a><a id="5684" href="blog/syntax-guided-synthesis/index.html#5684" class="Module">Solver</a>
    <a id="5695" class="Symbol">{</a><a id="5696" href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a> <a id="5701" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a> <a id="5703" href="blog/syntax-guided-synthesis/index.html#5703" class="Bound">O</a> <a id="5705" class="Symbol">:</a> <a id="5707" href="Agda.Primitive.html#320" class="Primitive">Set</a><a id="5710" class="Symbol">}</a>
    <a id="5716" class="Symbol">(</a><a id="5717" href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a> <a id="5722" class="Symbol">:</a> <a id="5724" class="Symbol">(</a><a id="5725" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a> <a id="5727" class="Symbol">→</a> <a id="5729" href="blog/syntax-guided-synthesis/index.html#5703" class="Bound">O</a><a id="5730" class="Symbol">)</a> <a id="5732" class="Symbol">→</a> <a id="5734" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a> <a id="5736" class="Symbol">→</a> <a id="5738" href="Agda.Primitive.html#320" class="Primitive">Set</a><a id="5741" class="Symbol">)</a>
    <a id="5747" class="Symbol">(</a><a id="5748" href="blog/syntax-guided-synthesis/index.html#5748" class="Bound">decide</a> <a id="5755" class="Symbol">:</a> <a id="5757" class="Symbol">(</a><a id="5758" href="blog/syntax-guided-synthesis/index.html#5758" class="Bound">f</a> <a id="5760" class="Symbol">:</a> <a id="5762" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a> <a id="5764" class="Symbol">→</a> <a id="5766" href="blog/syntax-guided-synthesis/index.html#5703" class="Bound">O</a><a id="5767" class="Symbol">)</a> <a id="5769" class="Symbol">→</a> <a id="5771" class="Symbol">(</a><a id="5772" href="blog/syntax-guided-synthesis/index.html#5772" class="Bound">i</a> <a id="5774" class="Symbol">:</a> <a id="5776" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a><a id="5777" class="Symbol">)</a> <a id="5779" class="Symbol">→</a> <a id="5781" href="Relation.Nullary.html#1520" class="Record">Dec</a> <a id="5785" class="Symbol">(</a><a id="5786" href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a> <a id="5791" href="blog/syntax-guided-synthesis/index.html#5758" class="Bound">f</a> <a id="5793" href="blog/syntax-guided-synthesis/index.html#5772" class="Bound">i</a><a id="5794" class="Symbol">))</a>
    <a id="5801" class="Symbol">(</a><a id="5802" href="blog/syntax-guided-synthesis/index.html#5802" class="Bound">compile</a> <a id="5810" class="Symbol">:</a> <a id="5812" href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a> <a id="5817" class="Symbol">→</a> <a id="5819" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a> <a id="5821" class="Symbol">→</a> <a id="5823" href="blog/syntax-guided-synthesis/index.html#5703" class="Bound">O</a><a id="5824" class="Symbol">)</a>
</pre>
<p>However, we also need a way of synthesizing terms in our <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a></span>uage. For that, we’ll use <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5996" class="Bound">enumerate</a></span>, which maps a natural number to a term:</p>
<pre class="Agda">    <a id="5995" class="Symbol">(</a><a id="5996" href="blog/syntax-guided-synthesis/index.html#5996" class="Bound">enumerate</a> <a id="6006" class="Symbol">:</a> <a id="6008" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="6010" class="Symbol">→</a> <a id="6012" href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a><a id="6016" class="Symbol">)</a>
</pre>
<p>Although it’s not necessary for the algorithm, we should be able to implement <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#6235" class="Bound">exhaustive</a></span> over <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5996" class="Bound">enumerate</a></span>, which states every <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a></span> is eventually produced by <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5996" class="Bound">enumerate</a></span>:</p>
<pre class="Agda">    <a id="6234" class="Symbol">(</a><a id="6235" href="blog/syntax-guided-synthesis/index.html#6235" class="Bound">exhaustive</a> <a id="6246" class="Symbol">:</a> <a id="6248" class="Symbol">(</a><a id="6249" href="blog/syntax-guided-synthesis/index.html#6249" class="Bound">x</a> <a id="6251" class="Symbol">:</a> <a id="6253" href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a><a id="6257" class="Symbol">)</a> <a id="6259" class="Symbol">→</a> <a id="6261" href="Data.Product.html#925" class="Function">Σ[</a> <a id="6264" href="blog/syntax-guided-synthesis/index.html#6264" class="Bound">n</a> <a id="6266" href="Data.Product.html#925" class="Function">∈</a> <a id="6268" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a> <a id="6270" href="Data.Product.html#925" class="Function">]</a> <a id="6272" class="Symbol">(</a><a id="6273" href="blog/syntax-guided-synthesis/index.html#5996" class="Bound">enumerate</a> <a id="6283" href="blog/syntax-guided-synthesis/index.html#6264" class="Bound">n</a> <a id="6285" href="Agda.Builtin.Equality.html#133" class="Datatype Operator">≡</a> <a id="6287" href="blog/syntax-guided-synthesis/index.html#6249" class="Bound">x</a><a id="6288" class="Symbol">))</a>
</pre>
<p>Finally, we need an <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#6743" class="Bound">oracle</a></span> capable of telling us if our solution is correct. This might sound a bit like cheating, but behind the scenes it’s just a magic SMT solver. The idea is that SMT can either confirm that our program is correct, or produce a counterexample that violates the <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a></span>. The type here is a bit crazy, so we’ll take it one step at a time.</p>
<p>An <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#6743" class="Bound">oracle</a></span> is a function that takes a <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a></span>…</p>
<pre class="Agda">    <a id="6742" class="Symbol">(</a><a id="6743" href="blog/syntax-guided-synthesis/index.html#6743" class="Bound">oracle</a>
      <a id="6756" class="Symbol">:</a> <a id="6758" class="Symbol">(</a><a id="6759" href="blog/syntax-guided-synthesis/index.html#6759" class="Bound">exp</a> <a id="6763" class="Symbol">:</a> <a id="6765" href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a><a id="6769" class="Symbol">)</a>
</pre>
<p>and either gives back a function that can produce a <code>spec (compile exp)</code> for every input:</p>
<pre class="Agda">      <a id="6877" class="Symbol">→</a>   <a id="6881" class="Symbol">((</a><a id="6883" href="blog/syntax-guided-synthesis/index.html#6883" class="Bound">i</a> <a id="6885" class="Symbol">:</a> <a id="6887" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a><a id="6888" class="Symbol">)</a> <a id="6890" class="Symbol">→</a> <a id="6892" href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a> <a id="6897" class="Symbol">(</a><a id="6898" href="blog/syntax-guided-synthesis/index.html#5802" class="Bound">compile</a> <a id="6906" href="blog/syntax-guided-synthesis/index.html#6759" class="Bound">exp</a><a id="6909" class="Symbol">)</a> <a id="6911" href="blog/syntax-guided-synthesis/index.html#6883" class="Bound">i</a><a id="6912" class="Symbol">)</a>
</pre>
<p>or gives back some input which is not a <code>spec (compile exp)</code>:</p>
<pre class="Agda">        <a id="6994" href="Data.Sum.Base.html#743" class="Datatype Operator">⊎</a> <a id="6996" href="Data.Product.html#925" class="Function">Σ[</a> <a id="6999" href="blog/syntax-guided-synthesis/index.html#6999" class="Bound">i</a> <a id="7001" href="Data.Product.html#925" class="Function">∈</a> <a id="7003" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a> <a id="7005" href="Data.Product.html#925" class="Function">]</a> <a id="7007" href="Relation.Nullary.html#665" class="Function Operator">¬</a> <a id="7009" href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a> <a id="7014" class="Symbol">(</a><a id="7015" href="blog/syntax-guided-synthesis/index.html#5802" class="Bound">compile</a> <a id="7023" href="blog/syntax-guided-synthesis/index.html#6759" class="Bound">exp</a><a id="7026" class="Symbol">)</a> <a id="7028" href="blog/syntax-guided-synthesis/index.html#6999" class="Bound">i</a><a id="7029" class="Symbol">)</a>
    <a id="7035" class="Keyword">where</a>
</pre>
<p>The algorithm here is actually quite clever. The idea is that to try each <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5996" class="Bound">enumerate</a></span>d value in order, attempting to minimize the number of calls we make to the <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#6743" class="Bound">oracle</a></span>, because they’re expensive. So instead, well keep a list of every counterexample we’ve seen so far, and ensure that our synthesized function passes all of them before sending it off to the <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#6743" class="Bound">oracle</a></span>. First, we’ll need a data structure to store our search progress:</p>
<pre class="Agda">  <a id="7508" class="Keyword">record</a> <a id="Solver.SearchState"></a><a id="7515" href="blog/syntax-guided-synthesis/index.html#7515" class="Record">SearchState</a> <a id="7527" class="Symbol">:</a> <a id="7529" href="Agda.Primitive.html#320" class="Primitive">Set</a> <a id="7533" class="Keyword">where</a>
    <a id="7543" class="Keyword">field</a>
      <a id="Solver.SearchState.iteration"></a><a id="7555" href="blog/syntax-guided-synthesis/index.html#7555" class="Field">iteration</a> <a id="7565" class="Symbol">:</a> <a id="7567" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a>
      <a id="Solver.SearchState.cases"></a><a id="7575" href="blog/syntax-guided-synthesis/index.html#7575" class="Field">cases</a> <a id="7581" class="Symbol">:</a> <a id="7583" href="Agda.Builtin.List.html#130" class="Datatype">List</a> <a id="7588" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a>
  <a id="7592" class="Keyword">open</a> <a id="7597" href="blog/syntax-guided-synthesis/index.html#7515" class="Module">SearchState</a>
</pre>
<p>The initial search state is one in which we start at the beginning, and have no counterexamples:</p>
<pre class="Agda">  <a id="Solver.start"></a><a id="7718" href="blog/syntax-guided-synthesis/index.html#7718" class="Function">start</a> <a id="7724" class="Symbol">:</a> <a id="7726" href="blog/syntax-guided-synthesis/index.html#7515" class="Record">SearchState</a>
  <a id="7740" href="blog/syntax-guided-synthesis/index.html#7555" class="Field">iteration</a> <a id="7750" href="blog/syntax-guided-synthesis/index.html#7718" class="Function">start</a> <a id="7756" class="Symbol">=</a> <a id="7758" class="Number">0</a>
  <a id="7762" href="blog/syntax-guided-synthesis/index.html#7575" class="Field">cases</a> <a id="7768" href="blog/syntax-guided-synthesis/index.html#7718" class="Function">start</a> <a id="7774" class="Symbol">=</a> <a id="7776" href="Agda.Builtin.List.html#167" class="InductiveConstructor">[]</a>
</pre>
<p>We can try a function by testing every counterexample:</p>
<pre class="Agda">  <a id="Solver.try"></a><a id="7847" href="blog/syntax-guided-synthesis/index.html#7847" class="Function">try</a> <a id="7851" class="Symbol">:</a> <a id="7853" class="Symbol">(</a><a id="7854" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a> <a id="7856" class="Symbol">→</a> <a id="7858" href="blog/syntax-guided-synthesis/index.html#5703" class="Bound">O</a><a id="7859" class="Symbol">)</a> <a id="7861" class="Symbol">→</a> <a id="7863" href="Agda.Builtin.List.html#130" class="Datatype">List</a> <a id="7868" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a> <a id="7870" class="Symbol">→</a> <a id="7872" href="Agda.Builtin.Bool.html#156" class="Datatype">Bool</a>
  <a id="7879" href="blog/syntax-guided-synthesis/index.html#7847" class="Function">try</a> <a id="7883" href="blog/syntax-guided-synthesis/index.html#7883" class="Bound">f</a> <a id="7885" class="Symbol">=</a> <a id="7887" href="Data.List.Base.html#4739" class="Function">all</a> <a id="7891" class="Symbol">(</a><a id="7892" href="Relation.Nullary.html#1590" class="Field">Dec.does</a> <a id="7901" href="Function.Base.html#1040" class="Function Operator">∘</a> <a id="7903" href="blog/syntax-guided-synthesis/index.html#5748" class="Bound">decide</a> <a id="7910" href="blog/syntax-guided-synthesis/index.html#7883" class="Bound">f</a><a id="7911" class="Symbol">)</a>
</pre>
<p>and finally, can now attempt to synthesize some code. Our function <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#8151" class="Function">check</a></span> takes a <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#7515" class="Record">SearchState</a></span>, and either gives back the next step of the search, or some program, and a proof that it’s what we’re looking for.</p>
<pre class="Agda">  <a id="Solver.check"></a><a id="8151" href="blog/syntax-guided-synthesis/index.html#8151" class="Function">check</a>
      <a id="8163" class="Symbol">:</a> <a id="8165" href="blog/syntax-guided-synthesis/index.html#7515" class="Record">SearchState</a>
      <a id="8183" class="Symbol">→</a> <a id="8185" href="blog/syntax-guided-synthesis/index.html#7515" class="Record">SearchState</a>
          <a id="8207" href="Data.Sum.Base.html#743" class="Datatype Operator">⊎</a> <a id="8209" class="Symbol">(</a><a id="8210" href="Data.Product.html#925" class="Function">Σ[</a> <a id="8213" href="blog/syntax-guided-synthesis/index.html#8213" class="Bound">exp</a> <a id="8217" href="Data.Product.html#925" class="Function">∈</a> <a id="8219" href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a> <a id="8224" href="Data.Product.html#925" class="Function">]</a> <a id="8226" class="Symbol">((</a><a id="8228" href="blog/syntax-guided-synthesis/index.html#8228" class="Bound">i</a> <a id="8230" class="Symbol">:</a> <a id="8232" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a><a id="8233" class="Symbol">)</a> <a id="8235" class="Symbol">→</a> <a id="8237" href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a> <a id="8242" class="Symbol">(</a><a id="8243" href="blog/syntax-guided-synthesis/index.html#5802" class="Bound">compile</a> <a id="8251" href="blog/syntax-guided-synthesis/index.html#8213" class="Bound">exp</a><a id="8254" class="Symbol">)</a> <a id="8256" href="blog/syntax-guided-synthesis/index.html#8228" class="Bound">i</a><a id="8257" class="Symbol">))</a>
  <a id="8262" href="blog/syntax-guided-synthesis/index.html#8151" class="Function">check</a> <a id="8268" href="blog/syntax-guided-synthesis/index.html#8268" class="Bound">ss</a>
</pre>
<p>We begin by getting and compiling the next <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#5996" class="Bound">enumerate</a></span>d term:</p>
<pre class="Agda">           <a id="8361" class="Keyword">with</a> <a id="8366" href="blog/syntax-guided-synthesis/index.html#5996" class="Bound">enumerate</a> <a id="8376" class="Symbol">(</a><a id="8377" href="blog/syntax-guided-synthesis/index.html#7555" class="Field">iteration</a> <a id="8387" href="blog/syntax-guided-synthesis/index.html#8268" class="Bound">ss</a><a id="8389" class="Symbol">)</a>
  <a id="8393" class="Symbol">...</a> <a id="8397" class="Symbol">|</a> <a id="8399" href="blog/syntax-guided-synthesis/index.html#8399" class="Bound">exp</a> <a id="8403" class="Keyword">with</a> <a id="8408" href="blog/syntax-guided-synthesis/index.html#5802" class="Bound">compile</a> <a id="8416" href="blog/syntax-guided-synthesis/index.html#8399" class="Bound">exp</a>
</pre>
<p>check if it passes all the previous counterexamples:</p>
<pre class="Agda">  <a id="8485" class="Symbol">...</a> <a id="8489" class="Symbol">|</a> <a id="8491" href="blog/syntax-guided-synthesis/index.html#8491" class="Bound">f</a> <a id="8493" class="Keyword">with</a> <a id="8498" href="blog/syntax-guided-synthesis/index.html#7847" class="Function">try</a> <a id="8502" href="blog/syntax-guided-synthesis/index.html#8491" class="Bound">f</a> <a id="8504" class="Symbol">(</a><a id="8505" href="blog/syntax-guided-synthesis/index.html#7575" class="Field">cases</a> <a id="8511" class="Bound">ss</a><a id="8513" class="Symbol">)</a>
</pre>
<p>if it doesn’t, just fail with the next <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#7555" class="Field">iteration</a></span>:</p>
<pre class="Agda">  <a id="8586" class="Symbol">...</a> <a id="8590" class="Symbol">|</a> <a id="8592" href="Agda.Builtin.Bool.html#175" class="InductiveConstructor">false</a> <a id="8598" class="Symbol">=</a> <a id="8600" href="Data.Sum.Base.html#793" class="InductiveConstructor">inj₁</a> <a id="8605" class="Symbol">(</a><a id="8606" class="Keyword">record</a> <a id="8613" class="Symbol">{</a> <a id="8615" href="blog/syntax-guided-synthesis/index.html#7555" class="Field">iteration</a> <a id="8625" class="Symbol">=</a> <a id="8627" href="Agda.Builtin.Nat.html#217" class="InductiveConstructor">suc</a> <a id="8631" class="Symbol">(</a><a id="8632" href="blog/syntax-guided-synthesis/index.html#7555" class="Field">iteration</a> <a id="8642" class="Bound">ss</a><a id="8644" class="Symbol">)</a>
                             <a id="8675" class="Symbol">;</a> <a id="8677" href="blog/syntax-guided-synthesis/index.html#7575" class="Field">cases</a> <a id="8683" class="Symbol">=</a> <a id="8685" href="blog/syntax-guided-synthesis/index.html#7575" class="Field">cases</a> <a id="8691" class="Bound">ss</a>
                             <a id="8723" class="Symbol">})</a>
</pre>
<p>Otherwise, our proposed function might just be the thing we’re looking for, so it’s time to consult the <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#6743" class="Bound">oracle</a></span>:</p>
<pre class="Agda">  <a id="8859" class="Symbol">...</a> <a id="8863" class="Symbol">|</a> <a id="8865" href="Agda.Builtin.Bool.html#181" class="InductiveConstructor">true</a> <a id="8870" class="Keyword">with</a> <a id="8875" href="blog/syntax-guided-synthesis/index.html#6743" class="Bound">oracle</a> <a id="8882" class="Bound">exp</a>
</pre>
<p>which either gives a counterexample that we need to record:</p>
<pre class="Agda">  <a id="8958" class="Symbol">...</a> <a id="8962" class="Symbol">|</a> <a id="8964" href="Data.Sum.Base.html#818" class="InductiveConstructor">inj₂</a> <a id="8969" class="Symbol">(</a><a id="8970" href="blog/syntax-guided-synthesis/index.html#8970" class="Bound">y</a> <a id="8972" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="8974" class="Symbol">_)</a> <a id="8977" class="Symbol">=</a>
          <a id="8989" href="Data.Sum.Base.html#793" class="InductiveConstructor">inj₁</a> <a id="8994" class="Symbol">(</a><a id="8995" class="Keyword">record</a> <a id="9002" class="Symbol">{</a> <a id="9004" href="blog/syntax-guided-synthesis/index.html#7555" class="Field">iteration</a> <a id="9014" class="Symbol">=</a> <a id="9016" href="Agda.Builtin.Nat.html#217" class="InductiveConstructor">suc</a> <a id="9020" class="Symbol">(</a><a id="9021" href="blog/syntax-guided-synthesis/index.html#7555" class="Field">iteration</a> <a id="9031" class="Bound">ss</a><a id="9033" class="Symbol">)</a>
                       <a id="9058" class="Symbol">;</a> <a id="9060" href="blog/syntax-guided-synthesis/index.html#7575" class="Field">cases</a> <a id="9066" class="Symbol">=</a> <a id="9068" href="blog/syntax-guided-synthesis/index.html#8970" class="Bound">y</a> <a id="9070" href="Agda.Builtin.List.html#182" class="InductiveConstructor Operator">∷</a> <a id="9072" href="blog/syntax-guided-synthesis/index.html#7575" class="Field">cases</a> <a id="9078" class="Bound">ss</a>
                       <a id="9104" class="Symbol">})</a>
</pre>
<p>or it confirms that our function satisfies the specification, and thus that were done:</p>
<pre class="Agda">  <a id="9206" class="Symbol">...</a> <a id="9210" class="Symbol">|</a> <a id="9212" href="Data.Sum.Base.html#793" class="InductiveConstructor">inj₁</a> <a id="9217" href="blog/syntax-guided-synthesis/index.html#9217" class="Bound">x</a> <a id="9219" class="Symbol">=</a> <a id="9221" href="Data.Sum.Base.html#818" class="InductiveConstructor">inj₂</a> <a id="9226" class="Symbol">(</a><a id="9227" class="Bound">exp</a> <a id="9231" href="Agda.Builtin.Sigma.html#218" class="InductiveConstructor Operator">,</a> <a id="9233" href="blog/syntax-guided-synthesis/index.html#9217" class="Bound">x</a><a id="9234" class="Symbol">)</a>
</pre>
<p>Pretty cool! The paper gives an optimization that caches the result of every counterexample on every synthesized program, and reuses these whenever that program appears as a subprogram of a larger one. The idea is that we can trade storage so we only ever need to evaluate each subprogram once — important for expensive computations.</p>
<p>Of course, pumping <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#8151" class="Function">check</a></span> by hand is annoying, so we can instead package it up as <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#9797" class="Function">solve</a></span> which takes a search depth, and iterates <span class="Agda"><a href="blog/syntax-guided-synthesis/index.html#8151" class="Function">check</a></span> until it runs out of gas or gets the right answer:</p>
<pre class="Agda">  <a id="Solver.solve"></a><a id="9797" href="blog/syntax-guided-synthesis/index.html#9797" class="Function">solve</a>
      <a id="9809" class="Symbol">:</a> <a id="9811" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a>
      <a id="9819" class="Symbol">→</a> <a id="9821" href="Agda.Builtin.Maybe.html#118" class="Datatype">Maybe</a> <a id="9827" class="Symbol">(</a><a id="9828" href="Data.Product.html#925" class="Function">Σ[</a> <a id="9831" href="blog/syntax-guided-synthesis/index.html#9831" class="Bound">exp</a> <a id="9835" href="Data.Product.html#925" class="Function">∈</a> <a id="9837" href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a> <a id="9842" href="Data.Product.html#925" class="Function">]</a> <a id="9844" class="Symbol">((</a><a id="9846" href="blog/syntax-guided-synthesis/index.html#9846" class="Bound">i</a> <a id="9848" class="Symbol">:</a> <a id="9850" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a><a id="9851" class="Symbol">)</a> <a id="9853" class="Symbol">→</a> <a id="9855" href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a> <a id="9860" class="Symbol">(</a><a id="9861" href="blog/syntax-guided-synthesis/index.html#5802" class="Bound">compile</a> <a id="9869" href="blog/syntax-guided-synthesis/index.html#9831" class="Bound">exp</a><a id="9872" class="Symbol">)</a> <a id="9874" href="blog/syntax-guided-synthesis/index.html#9846" class="Bound">i</a><a id="9875" class="Symbol">))</a>
  <a id="9880" href="blog/syntax-guided-synthesis/index.html#9797" class="Function">solve</a> <a id="9886" class="Symbol">=</a> <a id="9888" href="blog/syntax-guided-synthesis/index.html#9913" class="Function">go</a> <a id="9891" href="blog/syntax-guided-synthesis/index.html#7718" class="Function">start</a>
    <a id="9901" class="Keyword">where</a>
      <a id="9913" href="blog/syntax-guided-synthesis/index.html#9913" class="Function">go</a>
          <a id="9926" class="Symbol">:</a> <a id="9928" href="blog/syntax-guided-synthesis/index.html#7515" class="Record">SearchState</a>
          <a id="9950" class="Symbol">→</a> <a id="9952" href="Agda.Builtin.Nat.html#186" class="Datatype">ℕ</a>
          <a id="9964" class="Symbol">→</a> <a id="9966" href="Agda.Builtin.Maybe.html#118" class="Datatype">Maybe</a>
              <a id="9986" class="Symbol">(</a><a id="9987" href="Agda.Builtin.Sigma.html#148" class="Record">Σ</a> <a id="9989" href="blog/syntax-guided-synthesis/index.html#5696" class="Bound">Lang</a> <a id="9994" class="Symbol">(λ</a> <a id="9997" href="blog/syntax-guided-synthesis/index.html#9997" class="Bound">exp</a> <a id="10001" class="Symbol">→</a> <a id="10003" class="Symbol">(</a><a id="10004" href="blog/syntax-guided-synthesis/index.html#10004" class="Bound">i</a> <a id="10006" class="Symbol">:</a> <a id="10008" href="blog/syntax-guided-synthesis/index.html#5701" class="Bound">I</a><a id="10009" class="Symbol">)</a> <a id="10011" class="Symbol">→</a> <a id="10013" href="blog/syntax-guided-synthesis/index.html#5717" class="Bound">spec</a> <a id="10018" class="Symbol">(</a><a id="10019" href="blog/syntax-guided-synthesis/index.html#5802" class="Bound">compile</a> <a id="10027" href="blog/syntax-guided-synthesis/index.html#9997" class="Bound">exp</a><a id="10030" class="Symbol">)</a> <a id="10032" href="blog/syntax-guided-synthesis/index.html#10004" class="Bound">i</a><a id="10033" class="Symbol">))</a>
      <a id="10042" href="blog/syntax-guided-synthesis/index.html#9913" class="Function">go</a> <a id="10045" href="blog/syntax-guided-synthesis/index.html#10045" class="Bound">ss</a> <a id="10048" href="Agda.Builtin.Nat.html#204" class="InductiveConstructor">zero</a> <a id="10053" class="Symbol">=</a> <a id="10055" href="Agda.Builtin.Maybe.html#177" class="InductiveConstructor">nothing</a>
      <a id="10069" href="blog/syntax-guided-synthesis/index.html#9913" class="Function">go</a> <a id="10072" href="blog/syntax-guided-synthesis/index.html#10072" class="Bound">ss</a> <a id="10075" class="Symbol">(</a><a id="10076" href="Agda.Builtin.Nat.html#217" class="InductiveConstructor">suc</a> <a id="10080" href="blog/syntax-guided-synthesis/index.html#10080" class="Bound">n</a><a id="10081" class="Symbol">)</a> <a id="10083" class="Keyword">with</a> <a id="10088" href="blog/syntax-guided-synthesis/index.html#8151" class="Function">check</a> <a id="10094" href="blog/syntax-guided-synthesis/index.html#10072" class="Bound">ss</a>
      <a id="10103" class="Symbol">...</a> <a id="10107" class="Symbol">|</a> <a id="10109" href="Data.Sum.Base.html#793" class="InductiveConstructor">inj₁</a> <a id="10114" href="blog/syntax-guided-synthesis/index.html#10114" class="Bound">x</a> <a id="10116" class="Symbol">=</a> <a id="10118" href="blog/syntax-guided-synthesis/index.html#9913" class="Function">go</a> <a id="10121" class="Bound">ss</a> <a id="10124" class="Bound">n</a>
      <a id="10132" class="Symbol">...</a> <a id="10136" class="Symbol">|</a> <a id="10138" href="Data.Sum.Base.html#818" class="InductiveConstructor">inj₂</a> <a id="10143" href="blog/syntax-guided-synthesis/index.html#10143" class="Bound">y</a> <a id="10145" class="Symbol">=</a> <a id="10147" href="Agda.Builtin.Maybe.html#156" class="InductiveConstructor">just</a> <a id="10152" href="blog/syntax-guided-synthesis/index.html#10143" class="Bound">y</a>
</pre>
      ]]></content:encoded>
  </item>
</channel>
</rss>
